<?php
/**
 * @file
 * The main module file for the Islanora XACML Editor.
 */

/**
 * Implements hook_permission().
 */
function islandora_xacml_editor_permission() {
  return array(
    'administer islandora_xacml_editor' => array(
      'title' => 'Edit XACML Policies',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function islandora_xacml_editor_menu() {
  $items = array();
  $items['islandora/object/%islandora_object/manage/xacml'] = array(
    'title' => 'Object Policy',
    'type' => MENU_LOCAL_TASK,
    'weight' => 0,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_xacml_editor_form', 2),
    'access callback' => 'islandora_xacml_editor_access',
    'access arguments' => array(2),
    'file' => 'includes/form.inc',
  );
  $items['admin/islandora/xacml/editor'] = array(
    'title' => 'Islandora XACML Editor',
    'description' => 'Settings for the Islandora XACML module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_xacml_editor_settings'),
    'access arguments' => array('administer islandora_xacml_editor'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/admin.inc',
  );
  // We use %menu_tail to get around some of the issues that can arise with
  // users entering input for autocomplete. For example slashes would break.
  // Relevant Drupal thread: http://drupal.org/node/93854#comment-6164592.
  $items['islandora/xacml/dsidautocomplete/%/%menu_tail'] = array(
    'page callback' => 'islandora_xacml_editor_dsid_autocomplete',
    'page arguments' => array(3, 4),
    'type' => MENU_CALLBACK,
    'access arguments' => array('administer islandora_xacml_editor'),
    'load arguments' => array('%map', '%index'),
    'file' => 'includes/autocomplete.inc',
  );
  $items['islandora/xacml/mimeautocomplete/%/%menu_tail'] = array(
    'page callback' => 'islandora_xacml_editor_mime_autocomplete',
    'page arguments' => array(3, 4),
    'type' => MENU_CALLBACK,
    'access arguments' => array('administer islandora_xacml_editor'),
    'load arguments' => array('%map', '%index'),
    'file' => 'includes/autocomplete.inc',
  );
  return $items;
}

/**
 * Access callback function as to whether display the editor or not.
 *
 * @param AbstractObject $object
 *   A AbstractObject.
 *
 * @return bool
 *   TRUE if to show the tab, FALSE otherwise.
 */
function islandora_xacml_editor_access($object) {
  return islandora_object_access('administer islandora_xacml_editor', $object);
}

/**
 * Implements hook_islandora_object_access().
 */
function islandora_xacml_editor_islandora_object_access($op, $object, $user) {
  if ($op == 'administer islandora_xacml_editor') {
    if (isset($object['POLICY'])) {
      return islandora_datastream_access(ISLANDORA_METADATA_EDIT, $object['POLICY'], $user);
    }
    else {
      return islandora_object_access(ISLANDORA_ADD_DS, $object, $user);
    }
  }

  return NULL;
}

/**
 * Implements hook_islandora_datastream_purged().
 */
function islandora_xacml_editor_islandora_datastream_purged(AbstractObject $object, $dsid) {
  $viewable_by_user = 'isViewableByUser';
  $viewable_by_role = 'isViewableByRole';
  // The XACML POLICY is removed.
  if ($dsid === 'POLICY') {
    $object->relationships->remove(ISLANDORA_RELS_EXT_URI, $viewable_by_user);
    $object->relationships->remove(ISLANDORA_RELS_EXT_URI, $viewable_by_role);
    foreach ($object as $dsid => $value) {
      $object[$dsid]->relationships->remove(ISLANDORA_RELS_INT_URI, $viewable_by_user);
      $object[$dsid]->relationships->remove(ISLANDORA_RELS_INT_URI, $viewable_by_role);
    }
  }
  else {
    // An individual datastream is removed.
    if (isset($object['POLICY'])) {
      $xacml = new IslandoraXacml($object);
      $ds_rule = $xacml->datastreamRule->getRuleArray();
      if (array_search($dsid, $ds_rule['dsids']) !== FALSE) {
        if (count($ds_rule['users']) > 0) {
          $object[$dsid]->relationships->remove(ISLANDORA_RELS_INT_URI, $viewable_by_user);
        }
        if (count($ds_rule['roles']) > 0) {
          $object[$dsid]->relationships->remove(ISLANDORA_RELS_INT_URI, $viewable_by_role);
        }
      }
    }
  }
}

/**
 * Implements hook_islandora_datastream_ingested().
 */
function islandora_xacml_editor_islandora_datastream_ingested(AbstractObject $object, AbstractDatastream $datastream) {
  if (isset($object['POLICY'])) {
    $xacml = new IslandoraXacml($object);
    $ds_rule = $xacml->datastreamRule->getRuleArray();
    if (array_search($datastream->id, $ds_rule['dsids']) !== FALSE) {
      $viewable_by_user = 'isViewableByUser';
      $viewable_by_role = 'isViewableByRole';
      if (count($ds_rule['users']) > 0) {
        foreach ($ds_rule['users'] as $user) {
          // The XACML API adds fedoraAdmin to the list of users as to prevent
          // an object from being completely locked out. As this role is a
          // Fedora role and has no interaction with Drupal we won't add it for
          // cleanliness sake.
          if ($user !== 'fedoraAdmin') {
            $object[$datastream->id]->relationships->add(ISLANDORA_RELS_INT_URI, $viewable_by_user, $user, TRUE);
          }
        }
      }
      if (count($ds_rule['roles']) > 0) {
        foreach ($ds_rule['roles'] as $role) {
          $object[$datastream->id]->relationships->add(ISLANDORA_RELS_INT_URI, $viewable_by_role, $role, TRUE);
        }
      }
    }
  }
}

/**
 * Implemenets hook_islandora_xacml_editor_child_query().
 */
function islandora_xacml_editor_islandora_collectionCModel_islandora_xacml_editor_child_query($object) {
  $collection_query = 'select $object from <#ri> where
        ($object <fedora-rels-ext:isMemberOfCollection> <info:fedora/' . $object->id . '> or
        $object <fedora-rels-ext:isMemberOf> <info:fedora/' . $object->id . '>)
        and $object <fedora-model:state> <info:fedora/fedora-system:def/model#Active>';
  $grandchild_query = 'select $object from <#ri> where (walk(
        $object <fedora-rels-ext:isMemberOfCollection> <info:fedora/' . $object->id . '> and
        $object <fedora-rels-ext:isMemberOfCollection> $parent) or walk(
        $object <fedora-rels-ext:isMemberOf> <info:fedora/' . $object->id . '> and
        $object <fedora-rels-ext:isMemberOf> $parent))
        and $object <fedora-model:state> <info:fedora/fedora-system:def/model#Active>';
  return array(
    'collectionchildren' => array(
      'type' => 'itql',
      'query' => $collection_query,
      'description' => t('All children of this collection (existing and new).'),
    ),
    'collectiongrandchildren' => array(
      'type' => 'itql',
      'query' => $grandchild_query,
      'description' => t('All children of this collection and collections within this collection (existing and new).'),
    ),
  );
}

/**
 * Implements hook_islandora_ingest_steps().
 */
function islandora_xacml_editor_islandora_ingest_steps(array $form_state) {
  $shared_storage = islandora_ingest_form_get_shared_storage($form_state);
  if (empty($shared_storage['parent'])) {
    return;
  }
  $parent = $shared_storage['parent'];
  return array(
    'islandora_xacml_policy' => array(
      'type' => 'callback',
      'weight' => 8,
      'module' => 'islandora_xacml_editor',
      'do_function' => array(
        'function' => 'islandora_xacml_editor_apply_policy',
        'args' => array($parent),
      ),
      'undo_function' => array(
        'function' => 'islandora_xacml_editor_undo_policy',
        'args' => array(),
      ),
    ),
  );
}

/**
 * Applies the parent's POLICY datastream to the child if it exists.
 *
 * @param array $form_state
 *   The passed through form_state from hook_islandora_ingest_steps().
 * @param string $parent
 *   PID of the parent object.
 */
function islandora_xacml_editor_apply_policy(&$form_state, $parent) {
  $parent_object = islandora_object_load($parent);
  if ($parent_object['POLICY']) {
    foreach ($form_state['islandora']['objects'] as $object) {
      $xacml = new IslandoraXacml($object, $parent_object['POLICY']->content);
      $xacml->writeBackToFedora();
    }
  }
}

/**
 * Deletes the POLICY datastream and relationships added through the apply.
 *
 * @param array $form_state
 *   The passed through form_state from hook_islandora_ingest_steps().
 */
function islandora_xacml_editor_undo_policy(&$form_state) {
  foreach ($form_state['islandora']['objects'] as $object) {
    if (isset($object['POLICY'])) {
      $viewable_by_user = 'isViewableByUser';
      $viewable_by_role = 'isViewableByRole';
      $manageable_by_user = 'isManageableByUser';
      $manageable_by_role = 'isManageableByRole';
      $object->purgeDatastream('POLICY');
      $object->relationships->remove(ISLANDORA_RELS_EXT_URI, $viewable_by_user);
      $object->relationships->remove(ISLANDORA_RELS_EXT_URI, $viewable_by_role);
      $object->relationships->remove(ISLANDORA_RELS_EXT_URI, $manageable_by_user);
      $object->relationships->remove(ISLANDORA_RELS_EXT_URI, $manageable_by_role);

      foreach ($object as $dsid => $value) {
        $object[$dsid]->relationships->remove(ISLANDORA_RELS_INT_URI, $viewable_by_user);
        $object[$dsid]->relationships->remove(ISLANDORA_RELS_INT_URI, $viewable_by_role);
        $object[$dsid]->relationships->remove(ISLANDORA_RELS_INT_URI, $manageable_by_user);
        $object[$dsid]->relationships->remove(ISLANDORA_RELS_INT_URI, $manageable_by_role);
      }
    }
  }
}
