<?php

/**
 * @file
 *
 * The main module file for the Islanora XACML Editor
 */

/**
 * Implementation of hook_perm().
 */
function islandora_xacml_editor_perm() {
  return array('administer islandora_xacml_editor', 'Edit XACML Policies');
}

/**
 * Implementaion of hook_menu()
 * @todo Decide on the correct menu paths.
 */
function islandora_xacml_editor_menu() {
  $items = array();

  $items['xacml/%/%'] = array(
    'title' => 'XACML Editor',
    'description' => 'Edit XACML policies for a particular object.',
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_xacml_editor_page',1,2),
    'access arguments' => array('Edit XACML Policies'),
  );

  $items['admin/settings/islandora_xacml_editor'] = array(
    'title' => 'Islandora XACML Editor',
    'description' => 'Settings for the Islandora XACML module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_xacml_editor_settings'),
    'access arguments' => array('administer islandora_xacml_editor'),
  );

  return $items;
}

/**
 * Implementation of hook_islandora_tabs().
 */
function islandora_xacml_editor_islandora_tabs($content_models, $pid) {
  $tabs = array();
  if (variable_get('islandora_xacml_editor_show_tabs', TRUE)) {
    if (user_access('Edit XACML Policies')) {
      $item_is_collection = FALSE;
      foreach ($content_models as $content_model) {
        if ($content_model->pid == 'islandora:collectionCModel') {
          $item_is_collection = TRUE;
          break;
        }
      }
      if ($item_is_collection) {
        $title = t('Child Policy');
        $dsid = 'CHILD_SECURITY';
      }
      else {
        $title = t('Item Policy');
        $dsid = 'POLICY';
      }
      $tabs['xacml_policy'] = array(
        '#type' => 'tabpage',
        '#title' => $title,
        '#content' => drupal_get_form('islandora_xacml_editor_page',$pid,$dsid),
      );
    }
  }
  return $tabs;
}

/**
 * Admin settings form.
 */
function islandora_xacml_editor_settings() {
  $form = array();
  $form['islandora_xacml_editor_show_tabs'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show Policy Tabs'),
    '#description' => t("Show a tab for the XACML Policy Editor on each Fedora item's page. For normal items, this policy will only apply to the item itself; in the case of collection items (having the content model &lt;islandora:collectionCModel&gt;), this will be a child policy."),
    '#default_value' => variable_get('islandora_xacml_editor_show_tabs',1),
  );
  $form['islandora_xacml_editor_save_relationships'] = array(
	  '#type' => 'checkbox',
	  '#title' => t('Save policy details in RELS-EXT'),
    '#description' => t("Add <islandora:isViewableByUser> and <islandora:isViewableByRole> relationships to objects' RELS-EXT datastreams when XACML viewing restrictions are in place."),
    '#default_value' => variable_get('islandora_xacml_editor_save_relationships', FALSE),
  );
  return system_settings_form($form);
}

/**
 * The XACML editing form.
 */
function islandora_xacml_editor_page(&$form_state, $object_pid, $xacml_dsid) {

  module_load_include('inc', 'fedora_repository', 'api/fedora_utils');
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  module_load_include('inc', 'islandora_xacml_api', 'Xacml');
  module_load_include('inc', 'fedora_repository', 'ObjectHelper');

  // when we call in from top level collections in JS get get the
  // pid being undefined
  if($object_pid == 'undefined' || !$object_pid) {
    $object_pid = variable_get('fedora_repository_pid', 'islandora:top');
  }

  $form_state['storage'] = array();
  $form_state['storage']['object_pid'] = $object_pid;
  $form_state['storage']['xacml_dsid'] = $xacml_dsid;

  if(!valid_pid($object_pid) || !valid_dsid($xacml_dsid)) {
    drupal_not_found();
    exit();
  }

  $object = new Fedora_Item($object_pid);
  if(!$object->exists()) {
    drupal_not_found();
    exit();
  }
  $breadcrumbs = array();
  $objectHelper = new ObjectHelper();
  $objectHelper->getBreadcrumbs($object_pid, $breadcrumbs);
  drupal_set_breadcrumb(array_reverse($breadcrumbs));
  $datastreams = $object->get_datastreams_list_as_array();

  $mime = array();
  $dsid = array();


  module_load_include('inc', 'fedora_repository', 'ContentModel');

  if($xacml_dsid == 'CHILD_SECURITY') {
    module_load_include('inc', 'fedora_repository', 'CollectionPolicy');

    $collection = CollectionPolicy::loadFromCollection($object_pid);
    if($collection) {
      $cms = $collection->getContentModels();
      foreach($cms as $cm) {
        $contentmodel = ContentModel::loadFromModel($cm->pid);
        if($contentmodel) {
          $tmp = $contentmodel->getMimetypes();
          foreach($tmp as $t) {
            $mime[$t] = $t;
          }
        }
      }
    }
  }
  else {
    $contentmodel = ContentModel::loadFromObject($object_pid);
    if($contentmodel) {
      $tmp = $contentmodel->getMimetypes();
      foreach($tmp as $t) {
        $mime[$t] = $t;
      }
    }
  }

  foreach($datastreams as $k => $ds) {
    $mime[$ds['MIMEType']] = $ds['MIMEType'];
    $dsid[$k] = $k;
  }

  // get the user list
  $users = array();
  $result = db_query('SELECT u.uid, u.name FROM {users} u');
  while($user = db_fetch_object($result)) {
    $user->uid == 0 ? $users['anonymous'] = 'anonymous' : $users[$user->name] = $user->name;
    if($user->uid == 1) {
      $admin_user = $user->name;
      $form_state['storage']['admin_user'] = $user->name;
    }
  }

  // current user
  $form_state['storage']['current_user'] = $GLOBALS['user']->name;

  // get role list
  $roles = array();
  $result = db_query('SELECT r.rid, r.name FROM {role} r');
  while($role = db_fetch_object($result)) {
    $role->rid == 0 ? $roles['anonymous'] = 'anonymous' : $roles[$role->name] = $role->name;
  }

  if(array_key_exists($xacml_dsid, $datastreams)) {
    module_load_include('inc', 'islandora_xacml_api', 'XacmlException');

    // here we populate the form
    $xml = $object->get_datastream_dissemination($xacml_dsid);

    // some basic error handling
    try {
      $xacml = new Xacml($xml);
    }
    catch(XacmlException $e) {
      drupal_set_message($e->getMessage());
      drupal_set_message("Xacml Parser failed to parse $object_pid/$xacml_dsid. It is likely this POLICY wasn't written by the islandora XACML editor, it will have to be modified by hand.");
      drupal_not_found();
      exit();
    }
  }
  else {
    $xacml = new Xacml();
  }

  // select the admin user and the current user by default
  $selected_users = $GLOBALS['user']->name == $admin_user ? array($admin_user) : array($GLOBALS['user']->name, $admin_user);

  $form = array();

  $form['#tree'] = TRUE;

  $form['access'] = array(
    '#type' => 'fieldset',
    '#title' => t('Object Viewing'),
    '#collapsible' => TRUE,
    '#collapsed' => !$xacml->viewingRule->isPopulated(),
  );

  $form['access']['enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable XACML Restrictions on Object Viewing'),
    '#default_value' => $xacml->viewingRule->isPopulated(),
  );

  $form['access']['users'] = array(
    '#type' => 'select',
    '#title' => t('Allowed Users'),
    '#default_value' => $xacml->viewingRule->isPopulated() ? $xacml->viewingRule->getUsers() : $selected_users,
    '#options' => $users,
    '#multiple' => TRUE,
    '#size' => 10,
  );

  $form['access']['roles'] = array(
    '#type' => 'select',
    '#title' => t('Allowed Roles'),
    '#options' => $roles,
    '#multiple' => TRUE,
    '#size' => 10,
    '#default_value' => $xacml->viewingRule->isPopulated() ? $xacml->viewingRule->getRoles() : NULL,
  );

  $form['manage'] = array(
    '#weight' => -1,
    '#type' => 'fieldset',
    '#title' => t('Object Management'),
    '#description' => 'Select the Users and Roles that are allowed to manage this object.
      These users will also be able to view the object even if not explicitly allowed to in the
      object access section.
      WARNING: If you unselect youself you will be locked out of the object.',
    '#collapsible' => FALSE,
  );

  $form['manage']['users'] = array(
    '#type' => 'select',
    '#title' => t('Users'),
    '#options' => $users,
    '#default_value' => $xacml->managementRule->isPopulated() ? $xacml->managementRule->getUsers() : $selected_users,
    '#multiple' => TRUE,
    '#size' => 10
  );

  $form['manage']['roles'] = array(
    '#type' => 'select',
    '#title' => t('Roles'),
    '#default_value' => $xacml->managementRule->isPopulated() ? $xacml->managementRule->getRoles() : NULL,
    '#options' => $roles,
    '#multiple' => TRUE,
    '#size' => 10
  );

  $form['dsidmime'] = array(
    '#type' => 'fieldset',
    '#title' => t('Datastreams and MIME types'),
    '#collapsible' => TRUE,
    '#collapsed' => !$xacml->datastreamRule->isPopulated(),
  );

  $form['dsidmime']['enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable XACML Restrictions on DSIDs and MIME types'),
    '#default_value' => $xacml->datastreamRule->isPopulated(),
  );

  $form['dsidmime']['users'] = array(
    '#type' => 'select',
    '#title' => t('Users'),
    '#default_value' => $selected_users,
    '#options' => $users,
    '#multiple' => TRUE,
    '#size' => 10,
    '#default_value' => $xacml->datastreamRule->isPopulated() ? $xacml->datastreamRule->getUsers() : $selected_users,
  );

  $form['dsidmime']['roles'] = array(
    '#type' => 'select',
    '#title' => t('Roles'),
    '#options' => $roles,
    '#multiple' => TRUE,
    '#size' => 10,
    '#default_value' => $xacml->datastreamRule->isPopulated() ? $xacml->datastreamRule->getRoles() : NULL,
  );

  $form['dsidmime']['dsid'] = array(
    '#type' => 'select',
    '#title' => t('DSIDs'),
    '#options' => $dsid,
    '#multiple' => TRUE,
    '#size' => 10,
    '#default_value' => $xacml->datastreamRule->isPopulated() ? $xacml->datastreamRule->getDsids() : NULL,
  );

  $form['dsidmime']['mime'] = array(
    '#type' => 'select',
    '#title' => t('Mimetype'),
    '#options' => $mime,
    '#multiple' => TRUE,
    '#size' => 10,
    '#default_value' => $xacml->datastreamRule->isPopulated() ? $xacml->datastreamRule->getMimetypes() : NULL,
  );

 if($xacml_dsid == 'CHILD_SECURITY') {
    $form['update_options'] = array(
      '#type' => 'select',
      '#title' => t('What items would you like to apply this policy to?'),
      '#default_value' => 'newchildren',
      '#options' => array(
        'newchildren' => t('New children of this collection.'),
        'allchildren' => t('All children of this collection (Existing and new).'),
        'allgrandchildren' => t('All children of this collection and collections within this collection. (Existing and new).'),
      ),
    );
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Set Permissions')
  );

  return $form;
}

function islandora_xacml_editor_page_validate(&$form, &$form_state) {

  // test if the user is locking themselves or the admin out of the object
  $admin_user = $form_state['storage']['admin_user'];
  $current_user = $form_state['storage']['current_user'];

  // management functions
  if(!array_key_exists($admin_user,$form_state['values']['manage']['users']) ||
      !array_key_exists($current_user,$form_state['values']['manage']['users']) )
  {
    if($admin_user == $current_user) {
      form_set_error('manage][users',"Please make sure that $admin_user is selected in the manage
        section to prevent locking yourself out of the object.",FALSE);
    }
    else {
      form_set_error('manage][users',"Please make sure that $admin_user and $current_user are selected in the manage
        section to prevent locking yourself and the admin user out of the object.",FALSE);
    }
  }
}

/**
 * The submit function where all the XACML magic happens. Abracadabra.
 */
function islandora_xacml_editor_page_submit(&$form, &$form_state) {
  module_load_include('inc', 'islandora_xacml_api', 'Xacml');
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');

  $xacml = new Xacml();

  // check datastreams and mime
  $values = $form_state['values']['dsidmime'];
  if( $values['enabled'] ) {
    $xacml->datastreamRule->addMimetype($values['mime']);
    $xacml->datastreamRule->addDsid($values['dsid']);
    $xacml->datastreamRule->addUser($values['users']);
    $xacml->datastreamRule->addRole($values['roles']);
  }

  // check admin (always have this rule)
  $values = $form_state['values']['manage'];
  $xacml->managementRule->addUser($values['users']);
  $xacml->managementRule->addRole($values['roles']);

  // check access
  $values = $form_state['values']['access'];
  if( $values['enabled'] ) {
    $xacml->viewingRule->addUser($values['users']);
    $xacml->viewingRule->addRole($values['roles']);
  }

  $xml = $xacml->getXmlString();
  $pid = $form_state['storage']['object_pid'];
  $dsid = $form_state['storage']['xacml_dsid'];

  $object = new Fedora_Item($pid);
  $datastreams = $object->get_datastreams_list_as_array();

  if(array_key_exists($dsid, $datastreams)) {
    $object->modify_datastream_by_value($xml, $dsid, 'Xacml Policy Stream', 'text/xml');
  }
  else {
    $object->add_datastream_from_string($xml, $dsid, 'Xacml Policy Stream', 'text/xml', 'X');
  }

  // save relationships before $form_state['storage'] gets scrubbed, removing the object's PID
  $viewable_by_user = 'isViewableByUser';
  $viewable_by_role = 'isViewableByRole';
  // remove all old policy related rels-ext statements
  $object->purge_relationships($viewable_by_user, NULL, ISLANDORA_RELS_EXT_URI, RELS_TYPE_PLAIN_LITERAL);
  $object->purge_relationships($viewable_by_role, NULL, ISLANDORA_RELS_EXT_URI, RELS_TYPE_PLAIN_LITERAL);

  if (variable_get('islandora_xacml_editor_save_relationships', FALSE) && $xacml->viewingRule->isPopulated()) {
    $values = $form_state['values']['access'];
    // recompute the new values from the policy
    if (isset($values['users'])) {
      foreach($values['users'] as $account) {
        $object->add_relationship($viewable_by_user, $account, ISLANDORA_RELS_EXT_URI, RELS_TYPE_PLAIN_LITERAL);
      }
    }
    if (isset($values['roles'])) {
      foreach($values['roles'] as $role) {
        $object->add_relationship($viewable_by_role, $role, ISLANDORA_RELS_EXT_URI, RELS_TYPE_PLAIN_LITERAL);
      }
    }
  }

  if($dsid == 'CHILD_SECURITY' && $form_state['values']['update_options'] != 'newchildren') {
    $option = $form_state['values']['update_options'];
    $batch = array(
      'title' => t('Updating Policies'),
      'progress_message' => t('Please wait if many objects are being updated this could take a few minutes.'),
      'operations' => array(
        array('islandora_xacml_editor_batch_function', array($xml, $pid, $option)),
      ),
      'finished' => 'islandora_xacml_editor_batch_finished',
    );
    batch_set($batch);
  }
  else {
    unset($form_state['storage']);
    $form_state['redirect'] = array("fedora/repository/$pid");
  }
}

function islandora_xacml_editor_batch_function($xml, $pid, $option, &$context) {
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  module_load_include('inc', 'islandora_xacml_api', 'Xacml');
  module_load_include('inc', 'islandora_xacml_api', 'XacmlException');

  if (empty($context['sandbox'])) {
    $query = new IslandoraXacmlEditorQuery($pid, $option);
    $context['sandbox'] = array();
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['pids'] = $query->getPids();
    $context['sandbox']['items'] = count($context['sandbox']['pids']);
    $context['results']['redirect'] = $pid;
    $context['results']['success'] = array();
    $context['results']['fail'] = array();
  }

  $targetpid = array_pop($context['sandbox']['pids']);
  $context['sandbox']['progress']++;

  $policy_update = new IslandoraUpdatePolicy($targetpid, $xml);
  $success = $policy_update->updatePolicy();

  if($success) {
    $context['results']['success'][] = $targetpid;
  }
  else {
    $context['results']['fail'][] = $targetpid;
  }

  // make sure we don't divide by zero
  $context['finished'] = $context['sandbox']['items'] == 0 ? 1 : $context['sandbox']['progress'] / $context['sandbox']['items'];
}

function islandora_xacml_editor_batch_finished($success, $results, $operations) {
  if ($success) {
    $message = format_plural(count($results['success']), 'One policy updated.', '@count policies updated.');
  }
  else {
    $message = t('Finished with an error.');
  }
  drupal_set_message($message);

  if ($results['fail']) {
    foreach ($results['fail'] as $fail) {
      drupal_set_message("Failed to update: $fail. You do not have permission to update this object.", 'error');
    }
  }

  $pid = $results['redirect'];
  drupal_goto("fedora/repository/$pid");
}

/**
 * Hook to update the collection query when xacml is enabled.  By default the collection
 * query does not respect xacml rules, now when the xacml editor module is enabled the
 * query will be modified to use xacml rules.
 */
function islandora_xacml_editor_islandora_collection_query_alter(&$query, $pid) {
    global $user;
    $query = 'select $object $title $model $parent_model $created from <#ri>
              where
              ((
              $object <fedora-model:label> $title
              and $object <fedora-model:hasModel> $model
              and $object <fedora-model:createdDate> $created
              and $model <fedora-model:hasModel> $parent_model
              and $object <fedora-model:state> <info:fedora/fedora-system:def/model#Active>
              and ( $object <fedora-rels-ext:isMemberOfCollection> <info:fedora/' . $pid . '>
              or $object <fedora-rels-ext:isMemberOf> <info:fedora/' . $pid . '> )
              minus $object <http://islandora.ca/ontology/relsext#isViewableByRole> $role
              minus $object <http://islandora.ca/ontology/relsext#isViewableByUser> $user
              ) or (
              $object <fedora-model:label> $title
              and $object <fedora-model:hasModel> $model
              and $object <fedora-model:createdDate> $created
              and $model <fedora-model:hasModel> $parent_model
              and $object <fedora-model:state> <info:fedora/fedora-system:def/model#Active>
              and ( $object <fedora-rels-ext:isMemberOfCollection> <info:fedora/' . $pid . '>
              or $object <fedora-rels-ext:isMemberOf> <info:fedora/' . $pid . '> )
              and (';
    foreach ($user->roles as $role) {
      $query .= '$object <http://islandora.ca/ontology/relsext#isViewableByRole> '."'$role' or ";
    }
    $query .= '$object <http://islandora.ca/ontology/relsext#isViewableByUser> '."'$user->name'".')';
    $query .= '))
              minus $model <mulgara:is> <info:fedora/fedora-system:FedoraObject-3.0>
              minus $parent_model <mulgara:is> <info:fedora/fedora-system:FedoraObject-3.0>
              order by $title';
    return $query;
}

class IslandoraUpdatePolicy {
  protected $pid;

  function __construct($pid, $xml) {
    $this->pid = $pid;
    $this->xml = $xml;
    $this->object = new Fedora_Item($pid);
  }

  function isCollection() {
    $query = 'select $parent_model from <#ri> where (
      <info:fedora/' . $this->pid . '> <fedora-model:hasModel> $model
      and $model <fedora-model:hasModel> $parent_model
      and $object <fedora-model:state> <info:fedora/fedora-system:def/model#Active>
      )
      minus $parent_model <mulgara:is> <info:fedora/fedora-system:FedoraObject-3.0>
      minus $parent_model <mulgara:is> <info:fedora/fedora-system:ContentModel-3.0>';
    $query_results = IslandoraXacmlEditorQuery::query($query);
    $results = new SimpleXMLElement($query_results);
    $collection = FALSE;
    foreach($results->results->result as $result) {
      $pid = (string)$result->parent_model['uri'];
      $pid = explode('/',$pid);
      $pid = $pid[1];
      if($pid == 'islandora:collectionCModel') {
        $collection = TRUE;
      }
    }
    return $collection;
  }

  function updatePolicy() {
    global $user;
    $success = FALSE;
    if($this->object->exists()) {
      $datastreams = $this->object->get_datastreams_list_as_array();
      if(array_key_exists('POLICY', $datastreams)) {
        try {
          $xacml = Xacml::constructFromPid($this->pid);
          if($xacml->managementRule->hasPermission($user->name, $user->roles)) {
            $success = $this->addOrUpdateAllPolicies($datastreams);
          }
        }
        catch (XacmlException $e) {}
      }
      else {
        $success = $this->addOrUpdateAllPolicies($datastreams);
      }
    }
    return $success;
  }

  private function addOrUpdateAllPolicies($datastreams) {
    $ret = $this->addOrUpdatePolicy($datastreams, 'POLICY');
    if($this->isCollection()) {
      $ret &= $this->addOrUpdatePolicy($datastreams, 'CHILD_SECURITY');
    }
    return $ret;
  }

  private function addOrUpdatePolicy($datastreams, $dsid) {
    if(array_key_exists($dsid, $datastreams)) {
      return $this->object->modify_datastream_by_value($this->xml, $dsid, 'Xacml Policy Stream', 'text/xml');
    }
    else {
      return $this->object->add_datastream_from_string($this->xml, $dsid, 'Xacml Policy Stream', 'text/xml', 'X');
    }
  }
}

class IslandoraXacmlEditorQuery {
  protected $pid;
  protected $option;

  function __construct($pid, $option) {
    $this->pid = $pid;
    $this->option = $option;
  }

  static function query($query_string) {
    module_load_include('inc', 'fedora_repository', 'api/fedora_utils');
    $query_string = htmlentities(urlencode($query_string));
    $content = '';
    $url = variable_get('fedora_repository_url', 'http://localhost:8080/fedora/risearch');
    $url .= "?type=tuples&flush=TRUE&format=Sparql&lang=itql&stream=on&query=" . $query_string;
    $content .= do_curl($url);
    return $content;
  }

  function getCount() {
    $query_results = IslandoraXacmlEditorQuery::query($this->getCountQuery());
    $results = new SimpleXMLElement($query_results);
    return (int)$results->results->result[0]->k0;
  }

  function getPids() {
    $pids = array();
    $query_results = IslandoraXacmlEditorQuery::query($this->getQuery());
    $results = new SimpleXMLElement($query_results);
    foreach($results->results->result as $result) {
      $pid = (string)$result->object['uri'];
      $parts = explode('/',$pid);
      $pids[] = $parts[1];
    }
    return $pids;
  }

  private function getCountQuery() {
    $query = $this->getQuery();
    $query = 'select count( ' . $query;
    $query = $query . ' ) from <#ri> where $s $p $o';
    return $query;
  }

  private function getQuery() {
    if ($this->option == 'allgrandchildren') {
      $query = 'select $object from <#ri> where (walk(
        $object <fedora-rels-ext:isMemberOfCollection> <info:fedora/' . $this->pid . '> and
        $object <fedora-rels-ext:isMemberOfCollection> $parent) or walk(
        $object <fedora-rels-ext:isMemberOf> <info:fedora/' . $this->pid . '> and
        $object <fedora-rels-ext:isMemberOf> $parent))
        and $object <fedora-model:state> <info:fedora/fedora-system:def/model#Active>';
    }
    elseif ($this->option == 'allchildren') {
      $query = 'select $object from <#ri> where
        ($object <fedora-rels-ext:isMemberOfCollection> <info:fedora/' . $this->pid . '> or
        $object <fedora-rels-ext:isMemberOf> <info:fedora/' . $this->pid . '>)
        and $object <fedora-model:state> <info:fedora/fedora-system:def/model#Active>';
    }
    return $query;
  }
}
