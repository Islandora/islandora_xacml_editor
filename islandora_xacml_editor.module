<?php
/**
 * @file
 * The main module file for the Islanora XACML Editor.
 */

// Permission.
define('ISLANDORA_XACML_EDITOR_ADMINISTER_INHERITANCE_PERMISSION', 'administer xacml inheritance');

/**
 * Implements hook_permission().
 */
function islandora_xacml_editor_permission() {
  return array(
    'administer islandora_xacml_editor' => array(
      'title' => 'Edit XACML Policies',
    ),
    ISLANDORA_XACML_EDITOR_ADMINISTER_INHERITANCE_PERMISSION => array(
      'title' => 'Edit XACML Inheritance',
    ),
  );
}
/**
 * Implements hook_theme().
 */
function islandora_xacml_editor_theme($existing, $type, $theme, $path) {
  return array(
    'islandora_xacml_editor_policy_management_table' => array(
      'file' => 'includes/form.inc',
      'render element' => 'table',
    ),
  );
}
/**
 * Implements hook_menu().
 */
function islandora_xacml_editor_menu() {
  $items = array();
  $items['islandora/object/%islandora_object/manage/xacml'] = array(
    'title' => 'Object Policy',
    'type' => MENU_LOCAL_TASK,
    'weight' => 0,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_xacml_editor_form', 2),
    'access callback' => 'islandora_xacml_editor_access',
    'access arguments' => array(2),
    'file' => 'includes/form.inc',
  );
  $items['admin/islandora/xacml/editor'] = array(
    'title' => 'Islandora XACML Editor',
    'description' => 'Settings for the Islandora XACML module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_xacml_editor_settings'),
    'access arguments' => array('administer islandora_xacml_editor'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/admin.inc',
  );
  // We use %menu_tail to get around some of the issues that can arise with
  // users entering input for autocomplete. For example slashes would break.
  // Relevant Drupal thread: http://drupal.org/node/93854#comment-6164592.
  $items['islandora/xacml/dsidautocomplete/%/%menu_tail'] = array(
    'page callback' => 'islandora_xacml_editor_dsid_autocomplete',
    'page arguments' => array(3, 4),
    'type' => MENU_CALLBACK,
    'access arguments' => array('administer islandora_xacml_editor'),
    'load arguments' => array('%map', '%index'),
    'file' => 'includes/autocomplete.inc',
  );
  $items['islandora/xacml/mimeautocomplete/%/%menu_tail'] = array(
    'page callback' => 'islandora_xacml_editor_mime_autocomplete',
    'page arguments' => array(3, 4),
    'type' => MENU_CALLBACK,
    'access arguments' => array('administer islandora_xacml_editor'),
    'load arguments' => array('%map', '%index'),
    'file' => 'includes/autocomplete.inc',
  );
  return $items;
}

/**
 * Access callback function as to whether display the editor or not.
 *
 * @param AbstractObject $object
 *   A AbstractObject.
 *
 * @return bool
 *   TRUE if to show the tab, FALSE otherwise.
 */
function islandora_xacml_editor_access($object) {
  return islandora_object_access('administer islandora_xacml_editor', $object);
}

/**
 * Implements hook_islandora_object_access().
 */
function islandora_xacml_editor_islandora_object_access($op, $object, $user) {
  if ($op == 'administer islandora_xacml_editor') {
    if (isset($object['POLICY'])) {
      return islandora_datastream_access(ISLANDORA_METADATA_EDIT, $object['POLICY'], $user);
    }
    else {
      return islandora_object_access(ISLANDORA_ADD_DS, $object, $user);
    }
  }

  return NULL;
}

/**
 * Implemenets hook_islandora_xacml_editor_child_query().
 */
function islandora_xacml_editor_islandora_collectionCModel_islandora_xacml_editor_child_query($object) {
  $collection_query = 'select $object from <#ri> where
        ($object <fedora-rels-ext:isMemberOfCollection> <info:fedora/' . $object->id . '> or
        $object <fedora-rels-ext:isMemberOf> <info:fedora/' . $object->id . '>)
        and $object <fedora-model:state> <info:fedora/fedora-system:def/model#Active>';
  $grandchild_query = 'select $object from <#ri> where (walk(
        $object <fedora-rels-ext:isMemberOfCollection> <info:fedora/' . $object->id . '> and
        $object <fedora-rels-ext:isMemberOfCollection> $parent) or walk(
        $object <fedora-rels-ext:isMemberOf> <info:fedora/' . $object->id . '> and
        $object <fedora-rels-ext:isMemberOf> $parent))
        and $object <fedora-model:state> <info:fedora/fedora-system:def/model#Active>';
  return array(
    'collectionchildren' => array(
      'type' => 'itql',
      'query' => $collection_query,
      'description' => t('All children of this collection (existing and new).'),
    ),
    'collectiongrandchildren' => array(
      'type' => 'itql',
      'query' => $grandchild_query,
      'description' => t('All children of this collection and collections within this collection (existing and new).'),
    ),
  );
}

/**
 * Implements hook_islandora_ingest_steps().
 */
function islandora_xacml_editor_islandora_ingest_steps(array $form_state) {
  $shared_storage = islandora_ingest_form_get_shared_storage($form_state);
  if (empty($shared_storage['parent'])) {
    return;
  }
  $parent = $shared_storage['parent'];
  return array(
    'islandora_xacml_policy' => array(
      'type' => 'callback',
      'weight' => 8,
      'module' => 'islandora_xacml_editor',
      'do_function' => array(
        'function' => 'islandora_xacml_editor_apply_policy',
        'args' => array($parent),
      ),
      'undo_function' => array(
        'function' => 'islandora_xacml_editor_undo_policy',
        'args' => array(),
      ),
    ),
  );
}

/**
 * Applies the parent's POLICY datastream to the child if it exists.
 *
 * @param array $form_state
 *   The passed through form_state from hook_islandora_ingest_steps().
 * @param string $parent
 *   PID of the parent object.
 */
function islandora_xacml_editor_apply_policy(&$form_state, $parent) {
  $parent_object = islandora_object_load($parent);
  if ((!isset($form_state['input']['xacml']) && $parent_object['POLICY']) ||
    ($parent_object['POLICY'] && $form_state['input']['xacml'] != 'None')) {
    foreach ($form_state['islandora']['objects'] as $object) {
      // Need to update the RELS-INT to indicate which parent this policy is
      // inherited from.
      $object->relationships->add(ISLANDORA_RELS_EXT_URI, 'inheritXacmlFrom', $parent, TRUE);
      $xacml = new IslandoraXacml($object, $parent_object['POLICY']->content);
      $xacml->writeBackToFedora();
    }
  }
  if (!isset($parent_object['POLICY'])) {
    drupal_set_message(t('Parent @object does not contain an xacml policy.'), array('@object' => $parent), 'status');
  }
}

/**
 * Deletes the POLICY datastream and relationships added through the apply.
 *
 * @param array $form_state
 *   The passed through form_state from hook_islandora_ingest_steps().
 */
function islandora_xacml_editor_undo_policy(&$form_state) {
  foreach ($form_state['islandora']['objects'] as $object) {
    if (isset($object['POLICY'])) {
      $viewable_by_user = 'isViewableByUser';
      $viewable_by_role = 'isViewableByRole';
      $manageable_by_user = 'isManageableByUser';
      $manageable_by_role = 'isManageableByRole';
      $object->purgeDatastream('POLICY');
      $object->relationships->remove(ISLANDORA_RELS_EXT_URI, $viewable_by_user);
      $object->relationships->remove(ISLANDORA_RELS_EXT_URI, $viewable_by_role);
      $object->relationships->remove(ISLANDORA_RELS_EXT_URI, $manageable_by_user);
      $object->relationships->remove(ISLANDORA_RELS_EXT_URI, $manageable_by_role);

      foreach ($object as $dsid => $value) {
        $object[$dsid]->relationships->remove(ISLANDORA_RELS_INT_URI, $viewable_by_user);
        $object[$dsid]->relationships->remove(ISLANDORA_RELS_INT_URI, $viewable_by_role);
        $object[$dsid]->relationships->remove(ISLANDORA_RELS_INT_URI, $manageable_by_user);
        $object[$dsid]->relationships->remove(ISLANDORA_RELS_INT_URI, $manageable_by_role);
      }
    }
  }
}

/**
 * Implements islandora_basic_collection_build_manage_object().
 *
 * @param array $form_state
 *   The current Form State being processed.
 * @param AbstractObject $object
 *   The Islandora Object being processed.
 *
 * @return array
 *   The current Form State with manage_xacml element appended.
 */
function islandora_xacml_editor_islandora_basic_collection_build_manage_object(array $form_state, AbstractObject $object) {
  $form_state['manage_collection_object']['manage_xacml'] = array(
    '#id' => 'manage-xacml',
    '#group' => 'manage_xacml_object',
    '#access' => user_access(ISLANDORA_XACML_EDITOR_ADMINISTER_INHERITANCE_PERMISSION),
    '#type' => 'fieldset',
    '#title' => t('Manage XACML Inheritance'),
    'form' => drupal_get_form('islandora_xacml_editor_manage_xacml_form', $object),
  );
  $form_state['manage_collection_object']['manage_xacml']['form']['#submit'][] = 'islandora_xacml_editor_manage_xacml_form_submit';
  return $form_state;
}

/**
 * Form alter the child collection form.
 *
 * @param array $form
 *   The form being passed from the hook.
 * @param array $form_state
 *   The current Form State being processed.
 */
function islandora_xacml_editor_form_islandora_basic_collection_create_child_collection_form_alter(array &$form, array &$form_state) {
  $parent_object = islandora_object_load($form_state['islandora']['shared_storage']['parent']);
  $xacml_options = array('None' => 'none');
  if ($parent_object) {
    $xacml_options[$parent_object->id] = $parent_object->label;
  }

  $form['xacml'] = array(
    '#type' => 'select',
    '#title' => t('Inherit XACML policy from'),
    '#options' => $xacml_options,
  );
  // Using after_build to alter the weight dynamically.
  $form['#after_build'][] = 'islandora_xacml_editor_after_build';
}

/**
 * Dynamically adjust form element weights in after_build.
 *
 * @param array $form
 *   The form that has been rendered.
 * @param array $form_state
 *   The active form's form state.
 *
 * @return array
 *   The form after POST processing is complete.
 */
function islandora_xacml_editor_after_build($form, &$form_state) {
  $form['xacml']['#weight'] = $form['next']['#weight'] - .001;
  unset($form['#sorted']);
  return $form;
}

/**
 * Define the xacml management form.
 *
 * @param array $form
 *   The Drupal form definition.
 * @param array $form_state
 *   The Drupal form state.
 * @param AbstractObject $object
 *   The collection to move child objects from.
 *
 * @return array
 *   The Drupal form definition.
 */
function islandora_xacml_editor_manage_xacml_form(array $form, array &$form_state, AbstractObject $object) {
  module_load_include('inc', 'islandora', 'includes/utilities');
  $dt = islandora_basic_collection_get_member_objects($object, 0, 20, 'view', 'islandora:collectionCModel');
  $child_collections_pids = array();
  $rows = array();
  $options = array('none' => 'None');
  // Get the pids of the children for this collection.
  foreach ($dt[1] as $info) {
    array_push($child_collections_pids, $info['object']['value']);
  }
  foreach ($child_collections_pids as $pid) {
    $child_collection = islandora_object_load($pid);
    $parent_pids = islandora_basic_collection_get_parent_pids($child_collection);
    $rels_ext = $child_collection->relationships->get(FEDORA_RELS_EXT_URI, 'inheritXacmlFrom');
    foreach ($parent_pids as $parent_pid) {
      $parent_object = islandora_object_load($parent_pid);
      $options[$parent_object->id] = $parent_object->label;
    }
    $default_value = (isset($rels_ext[0]) ? $rels_ext[0]['object']['value'] : 'none');
    $rows[$pid] = array(
      'selected' => array(
        '#type' => 'checkbox',
        '#default_value' => FALSE,
      ),
      'title' => array(
        '#markup' => l(t('@label (@pid)', array('@label' => $child_collection->label, '@pid' => $pid)), "islandora/object/{$pid}"),
      ),
      'parents' => array(
        '#type' => 'select',
        '#options' => $options,
        '#default_value' => $default_value,
      ),
    );
  }
  return array(
    '#action' => request_uri() . '#policy-management',
    'help' => array(
      '#type' => 'item',
      '#markup' => t('XACML Inheritance Policies'),
    ),
    'table' => array(
      '#tree' => TRUE,
      '#header' => array(
        array('class' => array('select-all')), t('COLLECTION(PID)'), 'INHERIT FROM',
      ),
      'pager' => array(
        '#markup' => theme('pager'),
      ),
      '#theme' => 'islandora_xacml_editor_policy_management_table',
      'rows' => $rows,
    ),
    'submit' => array(
      '#type' => 'submit',
      '#value' => t('Update XACML Inheritance'),
    ),
  );
}

/**
 * Submit handler for the manage XACML form.
 *
 * @param array $form
 *   The Drupal form definition.
 * @param array $form_state
 *   The Drupal form state.
 */
function islandora_xacml_editor_manage_xacml_form_submit(array $form, array &$form_state) {
  $child_pids = array_keys($form_state['values']['table']['rows']);
  $count = 0;
  foreach ($form_state['values']['table']['rows'] as $row) {
    // Check if selected.
    if ($row['selected'] > 0) {
      $parent_object = islandora_object_load($row['parents']);
      // Are we adding the XACML POLICY or removing it? Just
      // check for a valid fedora object.
      if ($parent_object) {
        $object = islandora_object_load($child_pids[$count]);
        // Make sure there is a POLICY to inherit.
        if ($parent_object['POLICY']) {
          $object->relationships->add(FEDORA_RELS_EXT_URI, 'inheritXacmlFrom', $parent_object, TRUE);
          $xacml = new IslandoraXacml($object, $parent_object['POLICY']->content);
          $xacml->writeBackToFedora();
          drupal_set_message(t('@child now inherits XACML from @parent.',
            array(
              '@child' => $object->id,
              '@parent' => $parent_object->id)),
            'status');
        }
        else {
          drupal_set_message(t('@parent does not have an XACML policy.',
            array(
              '@parent' => $parent_object->id)),
            'status');
        }
      }
      else {
        // 'None' is currently selected for this row, so if it is selected,
        // we must remove the current XACML policy if it exists.
        $object = islandora_object_load($child_pids[$count]);
        if (isset($object['POLICY'])) {
          $object->relationships->remove(FEDORA_RELS_EXT_URI, 'inheritXacmlFrom', $parent_object, TRUE);
          $object->purgeDatastream('POLICY');
          drupal_set_message(t('@child no longer inherits XACML.',
            array('@child' => $object->id)),
            'status');
        }
      }
    }
    $count++;
  }
}
