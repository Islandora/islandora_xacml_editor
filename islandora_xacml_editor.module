<?php
/**
 * @file
 *
 * The main module file for the Islanora XACML Editor
 */

/**
 * Implements hook_perm().
 */
function islandora_xacml_editor_perm() {
  return array('administer islandora_xacml_editor', 'Edit XACML Policies');
}

/**
 * Implements hook_menu().
 * @todo Decide on the correct menu paths.
 */
function islandora_xacml_editor_menu() {
  $items = array();

  $items['xacml/%/%'] = array(
    'title' => 'XACML Editor',
    'description' => 'Edit XACML policies for a particular object.',
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_xacml_editor_page', 1, 2),
    'access arguments' => array('Edit XACML Policies'),
  );
  $items['admin/settings/islandora_xacml/editor'] = array(
    'title' => 'Islandora XACML Editor',
    'description' => 'Settings for the Islandora XACML module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_xacml_editor_settings'),
    'access arguments' => array('administer islandora_xacml_editor'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['xacml/dsidautocomplete/%/%'] = array(
    'page callback' => 'islandora_xacml_editor_dsid_autocomplete',
    'page arguments' => array(2, 3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'access arguments' => array('Edit XACML Policies'),
  );
  $items['xacml/mimeautocomplete/%/%/%'] = array(
    'page callback' => 'islandora_xacml_editor_mime_autocomplete',
    'page arguments' => array(2, 3, 4),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'access arguments' => array('Edit XACML Policies'),
  );
  $items['xacml/ahah/%/remove'] = array(
    'page callback' => 'islandora_xacml_editor_remove_js',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['xacml/ahah/add/dsid/%/%'] = array(
    'page callback' => 'islandora_xacml_editor_add_dsid_js',
    'page arguments' => array(4, 5),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['xacml/ahah/add/dsidregex/%/%'] = array(
    'page callback' => 'islandora_xacml_editor_add_dsid_regex_js',
    'page arguments' => array(4, 5),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['xacml/ahah/add/mime/%/%'] = array(
    'page callback' => 'islandora_xacml_editor_add_mime_js',
    'page arguments' => array(4, 5),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['xacml/ahah/add/mimeregex/%/%'] = array(
    'page callback' => 'islandora_xacml_editor_add_mime_regex_js',
    'page arguments' => array(4, 5),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 *
 * @param unknown_type $xacml_dsid
 */
function islandora_xacml_editor_remove_js($xacml_dsid) {
  module_load_include('inc', 'php_lib', 'Ahah');

  list($form_id, $form_build_id, $form, $form_state) = Ahah::getFormInfo();

  // Get the values of the selects to keep persistant across AHAH callbacks.
  if (isset($_POST['dsidmime']['enabled'])) {
    $form_state['storage']['dsidmime']['enabled']['#value'] = TRUE;
  }
  else {
    $form_state['storage']['dsidmime']['enabled']['#value'] = FALSE;
  }

  if (isset($_POST['access']['enabled'])) {
    $form_state['storage']['access']['enabled']['#value'] = TRUE;
  }
  else {
    $form_state['storage']['access']['enabled']['#value'] = FALSE;
  }

  if (isset($form_state['post']['dsidmime']['users'])) {
    $form_state['storage']['dsidmime']['users'] = $form_state['post']['dsidmime']['users'];
  }

  if (isset($form_state['post']['dsidmime']['roles'])) {
    $form_state['storage']['dsidmime']['roles'] = $form_state['post']['dsidmime']['roles'];
  }

  if (isset($form_state['post']['manage']['users'])) {
    $form_state['storage']['manage']['users'] = $form_state['post']['manage']['users'];
  }

  if (isset($form_state['post']['manage']['roles'])) {
    $form_state['storage']['manage']['roles'] = $form_state['post']['manage']['roles'];
  }

  if (isset($form_state['post']['access']['users'])) {
    $form_state['storage']['access']['users'] = $form_state['post']['access']['users'];
  }

  if (isset($form_state['post']['access']['roles'])) {
    $form_state['storage']['access']['roles'] = $form_state['post']['access']['roles'];
  }

  $values = $form_state['storage']['dsidmime'];

  if (isset($form_state['storage']['adddsid'])) {
    $values['dsid'] = array_merge($values['dsid'], $form_state['storage']['adddsid']);
  }

  if (isset($form_state['storage']['addmime'])) {
    $values['mime'] = array_merge($values['mime'], $form_state['storage']['addmime']);
  }

  // Determine which button was pressed to initiate the AHAH callback.
  // The button naming conventions from the table function dictate that the
  // portion to the left of the --- is the filter type and to the right is the
  // corresponding row number. From this we get the row to remove.
  $removeval = array_search('Remove', $form_state['post']);
  $removeval = str_replace('~SPACE~', ' ', $removeval);

  preg_match('/(.*)---(.*)/', $removeval, $match);
  $removeval = $match[2];
  $type = $match[1];
  if ($type == 'DSID') {
    $form_state['storage']['removedsid'] = $form_state['storage']['rows'][$removeval]['Filter'];
  }
  elseif ($type == 'MIME Type') {
    $form_state['storage']['removemime'] = $form_state['storage']['rows'][$removeval]['Filter'];
  }
  elseif ($type == 'MIME Type Regex') {
    $form_state['storage']['removemimeregex'] = $form_state['storage']['rows'][$removeval]['Filter'];
  }
  elseif ($type == 'DSID Regex') {
    $form_state['storage']['removedsidregex'] = $form_state['storage']['rows'][$removeval]['Filter'];
  }

  if ($xacml_dsid == 'CHILD_SECURITY') {
    $childvalue = $_POST['update_options'];
  }

  $form_state['action'] = $form['#action'];

  $tempvalues = $_POST;

  $form = Ahah::rebuildForm($form_id, $form_build_id, $form, $form_state);

  $form['dsidmime']['#collapsed'] = FALSE;

  if (!empty($tempvalues['dsidmime']['newdsid'])) {
    $form['dsidmime']['newdsid']['#value'] = $tempvalues['dsidmime']['newdsid'];
  }

  if (!empty($tempvalues['dsidmime']['newmime'])) {
    $form['dsidmime']['newmime']['#value'] = $tempvalues['dsidmime']['newmime'];
  }

  if (!empty($tempvalues['dsidmime']['mimeregex'])) {
    $form['dsidmime']['mimeregex']['#value'] = $tempvalues['dsidmime']['mimeregex'];
  }

  if (!empty($tempvalues['dsidmime']['dsidregex'])) {
    $form['dsidmime']['dsidregex']['#value'] = $tempvalues['dsidmime']['dsidregex'];
  }

  if ($xacml_dsid == 'CHILD_SECURITY') {
    $form['update_options']['#value'] = $childvalue;
  }

  Ahah::respond($form);
  exit();
}

/**
 *
 * @param unknown_type $xacml_dsid
 * @param unknown_type $pid
 */
function islandora_xacml_editor_add_dsid_regex_js($xacml_dsid, $pid) {
  module_load_include('inc', 'php_lib', 'Ahah');

  list($form_id, $form_build_id, $form, $form_state) = Ahah::getFormInfo();

  // Get the values of the selects to keep persistant across AHAH callbacks.
  if (isset($_POST['dsidmime']['enabled'])) {
    $form_state['storage']['dsidmime']['enabled']['#value'] = TRUE;
  }
  else {
    $form_state['storage']['dsidmime']['enabled']['#value'] = FALSE;
  }

  if (isset($_POST['access']['enabled'])) {
    $form_state['storage']['access']['enabled']['#value'] = TRUE;
  }
  else {
    $form_state['storage']['access']['enabled']['#value'] = FALSE;
  }

  if (isset($form_state['post']['dsidmime']['users'])) {
    $form_state['storage']['dsidmime']['users'] = $form_state['post']['dsidmime']['users'];
  }

  if (isset($form_state['post']['dsidmime']['roles'])) {
    $form_state['storage']['dsidmime']['roles'] = $form_state['post']['dsidmime']['roles'];
  }

  if (isset($form_state['post']['manage']['users'])) {
    $form_state['storage']['manage']['users'] = $form_state['post']['manage']['users'];
  }

  if (isset($form_state['post']['manage']['roles'])) {
    $form_state['storage']['manage']['roles'] = $form_state['post']['manage']['roles'];
  }

  if (isset($form_state['post']['access']['users'])) {
    $form_state['storage']['access']['users'] = $form_state['post']['access']['users'];
  }

  if (isset($form_state['post']['access']['roles'])) {
    $form_state['storage']['access']['roles'] = $form_state['post']['access']['roles'];
  }

  // Store and checks.
  if (!isset($form_state['storage']['dsidregexs'])) {
    $form_state['storage']['dsidregexs'] = array();
  }
  $addvalue = trim($_POST['dsidmime']['dsidregex']);

  // Check the additional dsids and the dsids from the XACML rules.
  if (!empty($addvalue) && !ctype_space($addvalue)) {

    if (isset($form_state['storage']['dsidregexs'])) {
      $added = array_search($addvalue, $form_state['storage']['dsidregexs']);
    }

    if (isset($form_state['storage']['selecteddsidregexs'])) {
      $rules = array_search($addvalue, $form_state['storage']['selecteddsidregexs']);
    }

    if (!is_numeric($added) && $rules != $addvalue) {
      $form_state['storage']['dsidregexs'][] = $addvalue;
    }
    else {
      drupal_set_message(t('The DSID regex %regex was not added as it already exists as a filter!',
        array(
          '%regex' => $addvalue,
        )
      ), 'warning');
    }
  }
  else {
    drupal_set_message(t('No DSID regex value entered!'), 'error');
  }

  $form_state['action'] = $form['#action'];
  $tempvalues = $_POST;

  if ($xacml_dsid == 'CHILD_SECURITY') {
    $childvalue = $_POST['update_options'];
  }

  $form = Ahah::rebuildForm($form_id, $form_build_id, $form, $form_state);

  $form['dsidmime']['#collapsed'] = FALSE;

  if (!empty($tempvalues['dsidmime']['newmime'])) {
    $form['dsidmime']['newmime']['#value'] = $tempvalues['dsidmime']['newmime'];
  }

  if (!empty($tempvalues['dsidmime']['mimeregex'])) {
    $form['dsidmime']['mimeregex']['#value'] = $tempvalues['dsidmime']['mimeregex'];
  }

  if (!empty($tempvalues['dsidmime']['newdsid'])) {
    $form['dsidmime']['newdsid']['#value'] = $tempvalues['dsidmime']['newdsid'];
  }

  if ($xacml_dsid == 'CHILD_SECURITY') {
    $form['update_options']['#value'] = $childvalue;
  }

  Ahah::respond($form);
  exit();
}

/**
 *
 * @param unknown_type $xacml_dsid
 * @param unknown_type $pid
 */
function islandora_xacml_editor_add_dsid_js($xacml_dsid, $pid) {
  module_load_include('inc', 'php_lib', 'Ahah');

  list($form_id, $form_build_id, $form, $form_state) = Ahah::getFormInfo();

  // Get the values of the selects to keep them persistant across AHAH callbacks.
  if (isset($_POST['dsidmime']['enabled'])) {
    $form_state['storage']['dsidmime']['enabled']['#value'] = TRUE;
  }
  else {
    $form_state['storage']['dsidmime']['enabled']['#value'] = FALSE;
  }

  if (isset($_POST['access']['enabled'])) {
    $form_state['storage']['access']['enabled']['#value'] = TRUE;
  }
  else {
    $form_state['storage']['access']['enabled']['#value'] = FALSE;
  }

  if (isset($form_state['post']['dsidmime']['users'])) {
    $form_state['storage']['dsidmime']['users'] = $form_state['post']['dsidmime']['users'];
  }

  if (isset($form_state['post']['dsidmime']['roles'])) {
    $form_state['storage']['dsidmime']['roles'] = $form_state['post']['dsidmime']['roles'];
  }

  if (isset($form_state['post']['manage']['users'])) {
    $form_state['storage']['manage']['users'] = $form_state['post']['manage']['users'];
  }

  if (isset($form_state['post']['manage']['roles'])) {
    $form_state['storage']['manage']['roles'] = $form_state['post']['manage']['roles'];
  }

  if (isset($form_state['post']['access']['users'])) {
    $form_state['storage']['access']['users'] = $form_state['post']['access']['users'];
  }

  if (isset($form_state['post']['access']['roles'])) {
    $form_state['storage']['access']['roles'] = $form_state['post']['access']['roles'];
  }

  if (!isset($form_state['storage']['adddsid'])) {
    $form_state['storage']['adddsid'] = array();
  }
  $addvalue = trim($_POST['dsidmime']['newdsid']);
  if (!empty($addvalue) && !ctype_space($addvalue)) {

    // Check the additional dsids and the dsids from the XACML rules.
    if (isset($form_state['storage']['adddsid'])) {
      $added = array_search($addvalue, $form_state['storage']['adddsid']);
    }

    if (isset($form_state['storage']['selecteddsid'])) {
      $rules = array_search($addvalue, $form_state['storage']['selecteddsid']);
    }
    $restricted_dsids = variable_get('islandora_xacml_editor_restricted_dsids', '');
    $restricted_dsids = preg_split('/[\s,]+/', $restricted_dsids);

    if (!is_numeric($added) && $rules != $addvalue && !in_array($addvalue, $restricted_dsids)) {
      $form_state['storage']['adddsid'][] = $addvalue;
    }
    elseif (in_array($addvalue, $restricted_dsids)) {
      drupal_set_message(t('The DSID %dsid was not added as it is restricted from the admin settings page!',
        array(
          '%dsid' => $addvalue,
        )
      ), 'warning');
    }
    else {
      drupal_set_message(t('The DSID %dsid was not added as it already exists as a filter!',
        array(
          '%dsid' => $addvalue,
        )
      ), 'warning');
    }
  }
  else {
    drupal_set_message(t('No DSID value entered!'), 'error');
  }

  if ($xacml_dsid == 'CHILD_SECURITY') {
    $childvalue = $_POST['update_options'];
  }

  $form_state['action'] = $form['#action'];
  $tempvalues = $_POST;
  $form = Ahah::rebuildForm($form_id, $form_build_id, $form, $form_state);

  $form['dsidmime']['#collapsed'] = FALSE;

  if (!empty($tempvalues['dsidmime']['newmime'])) {
    $form['dsidmime']['newmime']['#value'] = $tempvalues['dsidmime']['newmime'];
  }

  if (!empty($tempvalues['dsidmime']['mimeregex'])) {
    $form['dsidmime']['mimeregex']['#value'] = $tempvalues['dsidmime']['mimeregex'];
  }

  if (!empty($tempvalues['dsidmime']['dsidregex'])) {
    $form['dsidmime']['dsidregex']['#value'] = $tempvalues['dsidmime']['dsidregex'];
  }

  if ($xacml_dsid == 'CHILD_SECURITY') {
    $form['update_options']['#value'] = $childvalue;
  }

  Ahah::respond($form);
  exit();
}

/**
 *
 * @param unknown_type $xacml_dsid
 * @param unknown_type $pid
 */
function islandora_xacml_editor_add_mime_regex_js($xacml_dsid, $pid) {
  module_load_include('inc', 'php_lib', 'Ahah');

  list($form_id, $form_build_id, $form, $form_state) = Ahah::getFormInfo();

  // Get the values of the selects to keep persistant across AHAH callbacks.
  if (isset($_POST['dsidmime']['enabled'])) {
    $form_state['storage']['dsidmime']['enabled']['#value'] = TRUE;
  }
  else {
    $form_state['storage']['dsidmime']['enabled']['#value'] = FALSE;
  }

  if (isset($_POST['access']['enabled'])) {
    $form_state['storage']['access']['enabled']['#value'] = TRUE;
  }
  else {
    $form_state['storage']['access']['enabled']['#value'] = FALSE;
  }

  if (isset($form_state['post']['dsidmime']['users'])) {
    $form_state['storage']['dsidmime']['users'] = $form_state['post']['dsidmime']['users'];
  }

  if (isset($form_state['post']['dsidmime']['roles'])) {
    $form_state['storage']['dsidmime']['roles'] = $form_state['post']['dsidmime']['roles'];
  }

  if (isset($form_state['post']['manage']['users'])) {
    $form_state['storage']['manage']['users'] = $form_state['post']['manage']['users'];
  }

  if (isset($form_state['post']['manage']['roles'])) {
    $form_state['storage']['manage']['roles'] = $form_state['post']['manage']['roles'];
  }

  if (isset($form_state['post']['access']['users'])) {
    $form_state['storage']['access']['users'] = $form_state['post']['access']['users'];
  }

  if (isset($form_state['post']['access']['roles'])) {
    $form_state['storage']['access']['roles'] = $form_state['post']['access']['roles'];
  }

  // Store and checks.
  if (!isset($form_state['storage']['mimeregexs'])) {
    $form_state['storage']['mimeregexs'] = array();
  }

  $addvalue = trim($_POST['dsidmime']['mimeregex']);

  if (!empty($addvalue) && !ctype_space($addvalue)) {
    // Check the additional dsids and the dsids from the XACML rules.
    if (isset($form_state['storage']['mimeregexs'])) {
      $added = array_search($addvalue, $form_state['storage']['mimeregexs']);
    }

    if (isset($form_state['storage']['selectedmimeregexs'])) {
      $rules = array_search($addvalue, $form_state['storage']['selectedmimeregexs']);
    }

    if (!is_numeric($added) && $rules != $addvalue) {
      $form_state['storage']['mimeregexs'][] = $addvalue;
    }
    else {
      drupal_set_message(t('The MIME type regex %regex was not added as it already exists as a filter!',
        array(
          '%regex' => $addvalue,
        )
      ), 'warning');
    }
  }
  else {
    drupal_set_message(t('No MIME type regex value entered!'), 'error');
  }
  $form_state['action'] = $form['#action'];
  $tempvalues = $_POST;

  if ($xacml_dsid == 'CHILD_SECURITY') {
    $childvalue = $_POST['update_options'];
  }

  $form = Ahah::rebuildForm($form_id, $form_build_id, $form, $form_state);

  $form['dsidmime']['#collapsed'] = FALSE;

  if (!empty($tempvalues['dsidmime']['newmime'])) {
    $form['dsidmime']['newmime']['#value'] = $tempvalues['dsidmime']['newmime'];
  }

  if (!empty($tempvalues['dsidmime']['dsidregex'])) {
    $form['dsidmime']['dsidregex']['#value'] = $tempvalues['dsidmime']['dsidregex'];
  }

  if (!empty($tempvalues['dsidmime']['newdsid'])) {
    $form['dsidmime']['newdsid']['#value'] = $tempvalues['dsidmime']['newdsid'];
  }

  if ($xacml_dsid == 'CHILD_SECURITY') {
    $form['update_options']['#value'] = $childvalue;
  }

  Ahah::respond($form);
  exit();
}

/**
 *
 * @param unknown_type $xacml_dsid
 * @param unknown_type $pid
 */
function islandora_xacml_editor_add_mime_js($xacml_dsid, $pid) {
  module_load_include('inc', 'php_lib', 'Ahah');

  list($form_id, $form_build_id, $form, $form_state) = Ahah::getFormInfo();

  // Get the values of the selects to keep persistant across AHAH callbacks.
  if (isset($_POST['dsidmime']['enabled'])) {
    $form_state['storage']['dsidmime']['enabled']['#value'] = TRUE;
  }
  else {
    $form_state['storage']['dsidmime']['enabled']['#value'] = FALSE;
  }

  if (isset($_POST['access']['enabled'])) {
    $form_state['storage']['access']['enabled']['#value'] = TRUE;
  }
  else {
    $form_state['storage']['access']['enabled']['#value'] = FALSE;
  }

  if (isset($form_state['post']['dsidmime']['users'])) {
    $form_state['storage']['dsidmime']['users'] = $form_state['post']['dsidmime']['users'];
  }

  if (isset($form_state['post']['dsidmime']['roles'])) {
    $form_state['storage']['dsidmime']['roles'] = $form_state['post']['dsidmime']['roles'];
  }

  if (isset($form_state['post']['manage']['users'])) {
    $form_state['storage']['manage']['users'] = $form_state['post']['manage']['users'];
  }

  if (isset($form_state['post']['manage']['roles'])) {
    $form_state['storage']['manage']['roles'] = $form_state['post']['manage']['roles'];
  }

  if (isset($form_state['post']['access']['users'])) {
    $form_state['storage']['access']['users'] = $form_state['post']['access']['users'];
  }

  if (isset($form_state['post']['access']['roles'])) {
    $form_state['storage']['access']['roles'] = $form_state['post']['access']['roles'];
  }

  if (!isset($form_state['storage']['addmime'])) {
    $form_state['storage']['addmime'] = array();
  }

  if ($xacml_dsid == 'CHILD_SECURITY') {
    module_load_include('inc', 'fedora_repository', 'CollectionPolicy');

    $collection = CollectionPolicy::loadFromCollection($pid);
    if ($collection) {
      $cms = $collection->getContentModels();
      foreach ($cms as $cm) {
        $contentmodel = ContentModel::loadFromModel($cm->pid);
        if ($contentmodel) {
          $tmp = $contentmodel->getMimetypes();
          foreach ($tmp as $t) {
            $mime[$t] = $t;
          }
        }
      }
    }
  }
  else {
    module_load_include('inc', 'fedora_repository', 'ContentModel');
    $contentmodel = ContentModel::loadFromObject($pid);
    if ($contentmodel) {
      $tmp = $contentmodel->getMimetypes();
      foreach ($tmp as $t) {
        $mime[$t] = $t;
      }
    }
  }
  $addvalue = trim($_POST['dsidmime']['newmime']);
  if (!empty($addvalue) && !ctype_space($addvalue)) {
    if (isset($form_state['storage']['addmime'])) {
      $added = array_search($addvalue, $form_state['storage']['addmime']);
    }

    if (isset($form_state['storage']['selectedmime'])) {
      $rules = array_search($addvalue, $form_state['storage']['selectedmime']);
    }

    $restricted_mimes = variable_get('islandora_xacml_editor_restricted_mimes', '');
    $restricted_mimes = preg_split('/[\s,]+/', $restricted_mimes);

    if (!is_numeric($added) && $rules != $addvalue && !in_array($addvalue, $restricted_mimes)) {
      $form_state['storage']['addmime'][] = $addvalue;
    }
    elseif (in_array($addvalue, $restricted_mimes)) {
      drupal_set_message(t('The MIME type %mime was not added as it is restricted from the admin settings page!',
        array(
          '%mime' => $addvalue,
        )
      ), 'warning');
    }
    else {
      drupal_set_message(t('The MIME type %mime was not added as it already exists as a filter!',
        array(
          '%mime' => $addvalue,
        )
      ), 'warning');
    }
  }
  else {
    drupal_set_message(t('No MIME type value entered!'), 'error');
  }

  $form_state['action'] = $form['#action'];
  $tempvalues = $_POST;

  if ($xacml_dsid == 'CHILD_SECURITY') {
    $childvalue = $_POST['update_options'];
  }

  $form = Ahah::rebuildForm($form_id, $form_build_id, $form, $form_state);

  $form['dsidmime']['#collapsed'] = FALSE;

  if ($xacml_dsid == 'CHILD_SECURITY') {
    $form['update_options']['#value'] = $childvalue;
  }

  if (!empty($tempvalues['dsidmime']['newdsid'])) {
    $form['dsidmime']['newdsid']['#value'] = $tempvalues['dsidmime']['newdsid'];
  }

  if (!empty($tempvalues['dsidmime']['mimeregex'])) {
    $form['dsidmime']['mimeregex']['#value'] = $tempvalues['dsidmime']['mimeregex'];
  }

  if (!empty($tempvalues['dsidmime']['dsidregex'])) {
    $form['dsidmime']['dsidregex']['#value'] = $tempvalues['dsidmime']['dsidregex'];
  }

  Ahah::respond($form);
  exit();
}

/**
 *
 * @param unknown_type $pid
 * @param unknown_type $string
 */
function islandora_xacml_editor_dsid_autocomplete($pid, $string) {
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');

  $object = new Fedora_Item($pid);
  $dslist = $object->get_datastreams_list_as_array();

  $output = array();

  foreach ($dslist as $key => $value) {
    if ($string != '*') {
      if (strpos(strtoupper($key), strtoupper($string)) !== FALSE) {
        $output[$key] = check_plain($key);
      }
    }
    else {
      $output[$key] = check_plain($key);
    }
  }
  $restricted_dsids = variable_get('islandora_xacml_editor_restricted_dsids', '');
  $restricted_dsids = preg_split('/[\s,]+/', $restricted_dsids);

  $output = array_diff($output, $restricted_dsids);

  print drupal_to_js($output);
  exit();
}

/**
 *
 * @param unknown_type $xacml_dsid
 * @param unknown_type $pid
 * @param unknown_type $string
 */
function islandora_xacml_editor_mime_autocomplete($xacml_dsid, $pid, $string) {
  module_load_include('inc', 'fedora_repository', 'ContentModel');

  $output = array();
  if ($xacml_dsid == 'CHILD_SECURITY') {
    module_load_include('inc', 'fedora_repository', 'CollectionPolicy');

    $collection = CollectionPolicy::loadFromCollection($pid);
    if ($collection) {
      $cms = $collection->getContentModels();
      foreach ($cms as $cm) {
        $contentmodel = ContentModel::loadFromModel($cm->pid);
        if ($contentmodel) {
          $tmp = $contentmodel->getMimetypes();
          foreach ($tmp as $t) {
            $mime[$t] = $t;
          }
        }
      }
    }
  }
  else {
    $contentmodel = ContentModel::loadFromObject($pid);
    if ($contentmodel) {
      $tmp = $contentmodel->getMimetypes();
      foreach ($tmp as $t) {
        $mime[$t] = $t;
      }
    }
  }
  foreach ($mime as $key => $value) {
    if ($string != "*") {
      if (strpos(strtoupper($key), strtoupper($string)) !== FALSE) {
        $output[$key] = check_plain($key);
      }
    }
    else {
      $output[$key] = check_plain($key);
    }
  }
  $restricted_mimes = variable_get('islandora_xacml_editor_restricted_mimes', '');
  $restricted_mimes = preg_split('/[\s,]+/', $restricted_mimes);

  $output = array_diff($output, $restricted_mimes);

  print drupal_to_js($output);
  exit();

}

/**
 * Implements hook_islandora_tabs().
 */
function islandora_xacml_editor_islandora_tabs($content_models, $pid) {
  $tabs = array();
  if (variable_get('islandora_xacml_editor_show_tabs', TRUE)) {
    if (user_access('Edit XACML Policies')) {
      $item_is_collection = FALSE;
      foreach ($content_models as $content_model) {
        if ($content_model->pid == 'islandora:collectionCModel') {
          $item_is_collection = TRUE;
          break;
        }
      }
      if ($item_is_collection) {
        $title = t('Child Policy');
        $dsid = 'CHILD_SECURITY';
      }
      else {
        $title = t('Item Policy');
        $dsid = 'POLICY';
      }
      $tabs['xacml_policy'] = array(
        '#type' => 'tabpage',
        '#title' => $title,
        '#content' => drupal_get_form('islandora_xacml_editor_page', $pid, $dsid),
      );
    }
  }
  return $tabs;
}

/**
 * Admin settings form.
 */
function islandora_xacml_editor_settings() {
  drupal_add_css(drupal_get_path('module', 'islandora_xacml_editor') . '/css/islandora_xacml_editor.css');
  $form = array();
  $form['islandora_xacml_editor_show_tabs'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show Policy Tabs'),
    '#description' => t("Show a tab for the XACML Policy Editor on each Fedora item's page. For normal items, this policy will only apply to the item itself; in the case of collection items (having the content model &lt;islandora:collectionCModel&gt;), this will be a child policy."),
    '#default_value' => variable_get('islandora_xacml_editor_show_tabs', 1),
  );
  $form['islandora_xacml_editor_show_dsidregex'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display the DSID regex textfield?'),
    '#default_value' => variable_get('islandora_xacml_editor_show_dsidregex', 1),
  );
  $form['islandora_xacml_editor_show_mimeregex'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display the MIME type regex textfield?'),
    '#default_value' => variable_get('islandora_xacml_editor_show_mimeregex', 1),
  );
  $form['islandora_xacml_editor_restrictions'] = array(
    '#type' => 'fieldset',
    '#title' => t('Restrictions for DSID and MIME type'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#description' => 'DSIDs and MIMEs that will not appear in the autocomplete fields or be allowed as filters.',
  );
  $form['islandora_xacml_editor_restrictions']['islandora_xacml_editor_restricted_dsids'] = array(
    '#type' => 'textarea',
    '#title' => t('DSID'),
    '#default_value' => variable_get('islandora_xacml_editor_restricted_dsids', ''),
  );
  $form ['islandora_xacml_editor_restrictions']['islandora_xacml_editor_restricted_mimes'] = array(
    '#type' => 'textarea',
    '#title' => t('MIME type'),
    '#default_value' => variable_get('islandora_xacml_editor_restricted_mimes', ''),
  );
  $form['islandora_xacml_editor_defaults'] = array(
    '#type' => 'fieldset',
    '#title' => t('Default users and roles'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#description' => t('The users and roles that will appear as the default selected unless there is a existing XACML policy attached to an object.'),
  );

  // Get the user list.
  $users = array();
  $result = db_query('SELECT u.uid, u.name FROM {users} u');
  while ($user = db_fetch_object($result)) {
    $user->uid == 0 ? $users['anonymous'] = 'anonymous' : $users[$user->name] = $user->name;
    if ($user->uid == 1) {
      $admin_user = $user->name;
      $form_state['storage']['admin_user'] = $user->name;
    }
  }

  // Get role list.
  $roles = array();
  $result = db_query('SELECT r.rid, r.name FROM {role} r');
  while ($role = db_fetch_object($result)) {
    $role->rid == 0 ? $roles['anonymous'] = 'anonymous' : $roles[$role->name] = $role->name;
  }

  $form['islandora_xacml_editor_defaults']['islandora_xacml_editor_default_users'] = array(
    '#type' => 'select',
    '#title' => t('Users'),
    '#options' => $users,
    '#default_value' => variable_get('islandora_xacml_editor_default_users', 'admin'),
    '#multiple' => TRUE,
    '#size' => 10,
    '#prefix' => '<div class="islandora_xacml_selects">',
  );
  $form['islandora_xacml_editor_defaults']['islandora_xacml_editor_default_roles'] = array(
    '#type' => 'select',
    '#title' => t('Roles'),
    '#default_value' => variable_get('islandora_xacml_editor_default_roles', 'administrator'),
    '#options' => $roles,
    '#multiple' => TRUE,
    '#size' => 10,
    '#suffix' => '</div>',
  );
  return system_settings_form($form);
}

/**
 * The XACML editing form.
 */
function islandora_xacml_editor_page(&$form_state, $object_pid, $xacml_dsid) {
  drupal_add_css(drupal_get_path('module', 'islandora_xacml_editor') . '/css/islandora_xacml_editor.css');
  module_load_include('inc', 'fedora_repository', 'api/fedora_utils');
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  module_load_include('inc', 'islandora_xacml_api', 'Xacml');
  module_load_include('inc', 'fedora_repository', 'ObjectHelper');
  module_load_include('inc', 'php_lib', 'Ahah');

  Ahah::get_ahah_js();
  // When we call in from top level collections in JS get get the
  // pid being undefined.
  if ($object_pid == 'undefined' || !$object_pid) {
    $object_pid = variable_get('fedora_repository_pid', 'islandora:top');
  }

  if (!isset($form_state['storage'])) {
    $form_state['storage'] = array();
    $form_state['storage']['object_pid'] = $object_pid;
    $form_state['storage']['xacml_dsid'] = $xacml_dsid;
  }

  if (!valid_pid($object_pid) || !valid_dsid($xacml_dsid)) {
    drupal_not_found();
    exit();
  }

  $object = new Fedora_Item($object_pid);
  if (!$object->exists()) {
    drupal_not_found();
    exit();
  }
  $breadcrumbs = array();
  $object_helper = new ObjectHelper();
  $object_helper->getBreadcrumbs($object_pid, $breadcrumbs);
  drupal_set_breadcrumb(array_reverse($breadcrumbs));
  $datastreams = $object->get_datastreams_list_as_array();

  $mime = array();
  $dsid = array();


  module_load_include('inc', 'fedora_repository', 'ContentModel');

  if ($xacml_dsid == 'CHILD_SECURITY') {
    module_load_include('inc', 'fedora_repository', 'CollectionPolicy');

    $collection = CollectionPolicy::loadFromCollection($object_pid);
    if ($collection) {
      $cms = $collection->getContentModels();
      foreach ($cms as $cm) {
        $contentmodel = ContentModel::loadFromModel($cm->pid);
        if ($contentmodel) {
          $tmp = $contentmodel->getMimetypes();
          foreach ($tmp as $t) {
            $mime[$t] = $t;
          }
        }
      }
    }
  }
  else {
    $contentmodel = ContentModel::loadFromObject($object_pid);
    if ($contentmodel) {
      $tmp = $contentmodel->getMimetypes();
      foreach ($tmp as $t) {
        $mime[$t] = $t;
      }
    }
  }

  foreach ($datastreams as $k => $ds) {
    $mime[$ds['MIMEType']] = $ds['MIMEType'];
    $dsid[$k] = $k;
  }

  // Get the user list.
  $users = array();
  $result = db_query('SELECT u.uid, u.name FROM {users} u');
  while ($user = db_fetch_object($result)) {
    $user->uid == 0 ? $users['anonymous'] = 'anonymous' : $users[$user->name] = $user->name;
    if ($user->uid == 1) {
      $admin_user = $user->name;
      $form_state['storage']['admin_user'] = $user->name;
    }
  }

  // Current user.
  $form_state['storage']['current_user'] = $GLOBALS['user']->name;

  // Get role list.
  $roles = array();
  $result = db_query('SELECT r.rid, r.name FROM {role} r');
  while ($role = db_fetch_object($result)) {
    $role->rid == 0 ? $roles['anonymous'] = 'anonymous' : $roles[$role->name] = $role->name;
  }
  
  $new_xacml = FALSE;
  
  if (array_key_exists($xacml_dsid, $datastreams)) {
    module_load_include('inc', 'islandora_xacml_api', 'XacmlException');

    // Here we populate the form.
    $xml = $object->get_datastream_dissemination($xacml_dsid);

    // Some basic error handling.
    try {
      $xacml = new Xacml($xml);
    }
    catch (XacmlException $e) {
      watchdog('islandora_xacml_editor', $e->getMessage(), array(), WATCHDOG_ERROR);
      drupal_set_message($e->getMessage());
      drupal_set_message(t("Xacml Parser failed to parse @object_pid/@xacml_dsid. It is likely this POLICY wasn't written by the islandora XACML editor, it will have to be modified by hand.",
                          array("@object_pid" => $object_pid, "@xacml_dsid" => $xacml_dsid))
                        );
      drupal_not_found();
      exit();
    }
  }
  else {
    $new_xacml = TRUE;
    $xacml = new Xacml();
  }

  $form = array(
    '#prefix' => '<div id="islandora_xacml">',
    '#suffix' => '</div>',
  );
  $form['#cache'] = TRUE;

  if (isset($form_state['action'])) {
    $form['#action'] = $form_state['action'];
  }
  $form['#tree'] = TRUE;

  $form['access'] = array(
    '#type' => 'fieldset',
    '#title' => t('Object Viewing'),
    '#collapsible' => TRUE,
    '#collapsed' => !$xacml->viewingRule->isPopulated(),
  );

  $form['access']['enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable XACML Restrictions on Object Viewing'),
    '#default_value' => isset($form_state['storage']['access']['enabled']) ? $form_state['storage']['access']['enabled']['#value'] : $xacml->viewingRule->isPopulated(),
  );

  $form['access']['users'] = array(
    '#type' => 'select',
    '#title' => t('Allowed Users'),
    '#default_value' => isset($form_state['storage']['access']['users']) ? $form_state['storage']['access']['users'] : islandora_xacml_editor_retrieve_users($xacml, $new_xacml, 'viewing'),
    '#options' => $users,
    '#multiple' => TRUE,
    '#size' => 10,
    '#prefix' => '<div class="islandora_xacml_selects">',
  );

  $form['access']['roles'] = array(
    '#type' => 'select',
    '#title' => t('Allowed Roles'),
    '#options' => $roles,
    '#multiple' => TRUE,
    '#size' => 10,
    '#default_value' => isset($form_state['storage']['access']['roles']) ? $form_state['storage']['access']['roles'] : islandora_xacml_editor_retrieve_roles($xacml, $new_xacml, 'viewing'),
    '#suffix' => '</div>',
  );

  // Grab original value used in comparisons.
  if (!isset($form_state['storage']['accessenabled'])) {
    $form_state['storage']['accessenabled'] = $form['access']['enabled']['#default_value'];
  }  

  $form['manage'] = array(
    '#weight' => -1,
    '#type' => 'fieldset',
    '#title' => t('Object Management'),
    '#description' => 'Select the Users and Roles that are allowed to manage this object. These users will also be able to view the object even if not explicitly allowed to in the object access section. WARNING: If you unselect youself you will be locked out of the object.',
    '#collapsible' => FALSE,
  );

  $form['manage']['users'] = array(
    '#type' => 'select',
    '#title' => t('Users'),
    '#options' => $users,
    '#default_value' => isset($form_state['storage']['manage']['users']) ? $form_state['storage']['manage']['users'] : islandora_xacml_editor_retrieve_users($xacml, $new_xacml, 'management'),
    '#multiple' => TRUE,
    '#size' => 10,
    '#prefix' => '<div class="islandora_xacml_selects">',
  );

  $form['manage']['roles'] = array(
    '#type' => 'select',
    '#title' => t('Roles'),
    '#default_value' => isset($form_state['storage']['manage']['roles']) ? $form_state['storage']['manage']['roles'] : islandora_xacml_editor_retrieve_roles($xacml, $new_xacml, 'management'),
    '#options' => $roles,
    '#multiple' => TRUE,
    '#size' => 10,
    '#suffix' => '</div>',
  );

  $form['dsidmime'] = array(
    '#type' => 'fieldset',
    '#title' => t('Datastreams and MIME types'),
    '#collapsible' => TRUE,
    '#collapsed' => !$xacml->datastreamRule->isPopulated(),
  );

  $form['dsidmime']['enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable XACML Restrictions on DSIDs and MIME types'),
    '#default_value' => isset($form_state['storage']['dsidmime']['enabled']) ? $form_state['storage']['dsidmime']['enabled']['#value'] : $xacml->datastreamRule->isPopulated(),
  );

  // Grab the original value to be used in comparisons.
  if (!isset($form_state['storage']['dsidmimeenabled'])) {
    $form_state['storage']['dsidmimeenabled'] = $form['dsidmime']['enabled']['#default_value'];
  }

  if ($xacml_dsid == 'CHILD_SECURITY') {
    $form['update_options'] = array(
      '#type' => 'select',
      '#title' => t('What items would you like to apply this policy to?'),
      '#default_value' => 'newchildren',
      '#options' => array(
        'newchildren' => t('New children of this collection.'),
        'allchildren' => t('All children of this collection (Existing and new).'),
        'allgrandchildren' => t('All children of this collection and collections within this collection. (Existing and new).'),
      ),
    );
  }

  $form['dsidmime']['users'] = array(
    '#type' => 'select',
    '#title' => t('Users'),
    '#options' => $users,
    '#default_value' => isset($form_state['storage']['dsidmime']['users']) ? $form_state['storage']['dsidmime']['users'] : islandora_xacml_editor_retrieve_users($xacml, $new_xacml, 'datastream'),
    '#multiple' => TRUE,
    '#size' => 10,
    '#prefix' => '<div class="islandora_xacml_selects">',
  );

  $form['dsidmime']['roles'] = array(
    '#type' => 'select',
    '#title' => t('Roles'),
    '#default_value' => isset($form_state['storage']['dsidmime']['roles']) ? $form_state['storage']['dsidmime']['roles'] : islandora_xacml_editor_retrieve_roles($xacml, $new_xacml, 'datastream'),
    '#options' => $roles,
    '#multiple' => TRUE,
    '#size' => 10,
    '#suffix' => '</div>',
  );

  // Grab these values to handle removal.
  $tempmime = $xacml->datastreamRule->getMimetypes();
  $tempdsid = $xacml->datastreamRule->getDsids();
  $tempmimeregexs = $xacml->datastreamRule->getMimetypeRegexs();
  $tempdsidregexs = $xacml->datastreamRule->getDsidRegexs();

  if (isset($form_state['storage']['removedsid'])) {
    $key = array_search($form_state['storage']['removedsid'], $tempdsid);

    // If the value is not one of our 'hidden DSIDs'
    if (is_numeric($key)) {
      $xacml->datastreamRule->removeDsid($tempdsid[$key]);
      $form_state['storage']['hidedsids'][] = $form_state['storage']['removedsid'];
    }

    $dsid = $form_state['storage']['removedsid'];
    unset($form_state['storage']['removedsid']);

    if (isset($form_state['storage']['adddsid'])) {
      $search = array_search($dsid, $form_state['storage']['adddsid']);

      if (is_numeric($search)) {
        unset($form_state['storage']['adddsid'][$search]);
      }
    }
  }

  if (isset($form_state['storage']['removemime'])) {
    $key = array_search($form_state['storage']['removemime'], $tempmime);

    // If the value is not one of our 'hidden mimes'
    if (is_numeric($key)) {
      $xacml->datastreamRule->removeMimetype($tempmime[$key]);
      $form_state['storage']['hidemimes'][] = $form_state['storage']['removemime'];
    }

    $mime = $form_state['storage']['removemime'];
    unset($form_state['storage']['removemime']);

    if (isset($form_state['storage']['addmime'])) {
      $search = array_search($mime, $form_state['storage']['addmime']);

      if (is_numeric($search)) {
        unset($form_state['storage']['addmime'][$search]);
      }
    }
  }

  if (isset($form_state['storage']['removemimeregex'])) {
    $key = array_search($form_state['storage']['removemimeregex'], $tempmimeregexs);

    // If the value is not one of our 'hidden mime regexs'
    if (is_numeric($key)) {
      $xacml->datastreamRule->removeMimetypeRegex($tempmimeregexs[$key]);
      $form_state['storage']['hidemimeregexs'][] = $form_state['storage']['removemimeregex'];
    }

    $mime = $form_state['storage']['removemimeregex'];
    unset($form_state['storage']['removemimeregex']);

    if (isset($form_state['storage']['mimeregexs'])) {
      $search = array_search($mime, $form_state['storage']['mimeregexs']);

      if (is_numeric($search)) {
        unset($form_state['storage']['mimeregexs'][$search]);
      }
    }
  }

  if (isset($form_state['storage']['removedsidregex'])) {
    $key = array_search($form_state['storage']['removedsidregex'], $tempdsidregexs);

    // If the value is not one of our 'hidden mimes'
    if (is_numeric($key)) {
      $xacml->datastreamRule->removeDsidRegex($tempdsidregexs[$key]);
      $form_state['storage']['hidedsidregexs'][] = $form_state['storage']['removedsidregex'];
    }

    $dsid = $form_state['storage']['removedsidregex'];
    unset($form_state['storage']['removedsidregex']);

    if (isset($form_state['storage']['dsidregexs'])) {
      $search = array_search($dsid, $form_state['storage']['dsidregexs']);

      if (is_numeric($search)) {
        unset($form_state['storage']['dsidregexs'][$search]);
      }
    }
  }

  // If we are carrying values from the original rule that need to be removed
  // remove them.
  if (isset($form_state['storage']['hidemimes'])) {
    foreach ($form_state['storage']['hidemimes'] as $key => $value) {
      $xacml->datastreamRule->removeMimetype($value);
    }
  }

  if (isset($form_state['storage']['hidedsids'])) {
    foreach ($form_state['storage']['hidedsids'] as $key => $value) {
      $xacml->datastreamRule->removeDsid($value);
    }
  }

  if (isset($form_state['storage']['hidemimeregexs'])) {
    foreach ($form_state['storage']['hidemimeregexs'] as $key => $value) {
      $xacml->datastreamRule->removeMimetypeRegex($value);
    }
  }

  if (isset($form_state['storage']['hidedsidregexs'])) {
    foreach ($form_state['storage']['hidedsidregexs'] as $key => $value) {
      $xacml->datastreamRule->removeDsidRegex($value);
    }
  }

  // Grab the updated values to handle addition of rules.
  $tempmime = $xacml->datastreamRule->getMimetypes();
  $tempdsid = $xacml->datastreamRule->getDsids();
  $tempmimeregexs = $xacml->datastreamRule->getMimetypeRegexs();
  $tempdsidregexs = $xacml->datastreamRule->getDsidRegexs();

  // Add any values we are carrying in the form storage to the datastream rules.
  if (isset($form_state['storage']['adddsid'])) {
    foreach ($form_state['storage']['adddsid'] as $key => $value) {
      $search = array_search($value, $tempdsid);

      if (!is_numeric($search)) {
        $xacml->datastreamRule->addDsid($value);

        if (isset($form_state['storage']['hidedsids'])) {
          $removedsid = array_search($value, $form_state['storage']['hidedsids']);

          if (is_numeric($removedsid)) {
            unset($form_state['storage']['hidesids'][$removedsid]);
          }
        }
      }
    }
  }

  if (isset($form_state['storage']['addmime'])) {
    foreach ($form_state['storage']['addmime'] as $key => $value) {
      $search = array_search($value, $tempmime);

      if (!is_numeric($search)) {
        $xacml->datastreamRule->addMimetype($value);

        if (isset($form_state['storage']['hidemimes'])) {
          $removemime = array_search($value, $form_state['storage']['hidemimes']);

          if (is_numeric($removemime)) {
            unset($form_state['storage']['hidemimes'][$removemime]);
          }
        }
      }
    }
  }

  if (isset($form_state['storage']['dsidregexs'])) {
    foreach ($form_state['storage']['dsidregexs'] as $key => $value) {
      $search = array_search($value, $tempdsidregexs);

      if (!is_numeric($search)) {
        $xacml->datastreamRule->addDsidRegex($value);

        if (isset($form_state['storage']['hidedsidregexs'])) {
          $removedsid = array_search($value, $form_state['storage']['hidedsidregexs']);

          if (is_numeric($removedsid)) {
            unset($form_state['storage']['hidedsidregexs'][$removedsid]);
          }
        }
      }
    }
  }

  if (isset($form_state['storage']['mimeregexs'])) {
    foreach ($form_state['storage']['mimeregexs'] as $key => $value) {
      $search = array_search($value, $tempmimeregexs);

      if (!is_numeric($search)) {
        $xacml->datastreamRule->addMimetypeRegex($value);

        if (isset($form_state['storage']['hidemimeregexs'])) {
          $removemime = array_search($value, $form_state['storage']['hidemimeregexs']);

          if (is_numeric($removemime)) {
            unset($form_state['storage']['hidemimeregexs'][$removemime]);
          }
        }
      }
    }
  }

  // Grab the values one last time for storage and use in constructing the
  // rules table.
  $selectedmime = $xacml->datastreamRule->getMimetypes();
  $selecteddsid = $xacml->datastreamRule->getDsids();
  $selectedmimeregexs = $xacml->datastreamRule->getMimetypeRegexs();
  $selecteddsidregexs = $xacml->datastreamRule->getDsidRegexs();

  // We store these values for use in the AHAH callbacks.
  $form_state['storage']['dsidmime']['dsid'] = $selecteddsid;
  $form_state['storage']['dsidmime']['mime'] = $selectedmime;
  $form_state['storage']['dsidmime']['dsidregexs'] = $selecteddsidregexs;
  $form_state['storage']['dsidmime']['mimeregexs'] = $selectedmimeregexs;

  if (count($selectedmime) > 0) {
    $form_state['storage']['selectedmime'] = array_combine($selectedmime, $selectedmime);
  }
  else {
    unset($form_state['storage']['selectedmime']);
  }

  if (count($selecteddsid) > 0) {
    $form_state['storage']['selecteddsid'] = array_combine($selecteddsid, $selecteddsid);
  }
  else {
    unset($form_state['storage']['selecteddsid']);
  }

  if (count($selectedmimeregexs) > 0) {
    $form_state['storage']['selectedmimeregexs'] = array_combine($selectedmimeregexs, $selectedmimeregexs);
  }
  else {
    unset($form_state['storage']['selectedmimeregexs']);
  }

  if (count($selecteddsidregexs) > 0) {
    $form_state['storage']['selecteddsidregexs'] = array_combine($selecteddsidregexs, $selecteddsidregexs);
  }
  else {
    unset($form_state['storage']['selecteddsidregexs']);
  }

  $rows = array();

  if (!empty($selectedmime)) {
    foreach ($selectedmime as $mime) {
      $rows[] = array(
        'Filter' => trim($mime),
        'Type' => 'MIME Type',
      );
    }
  }

  if (!empty($selectedmimeregexs)) {
    foreach ($selectedmimeregexs as $mimeregex) {
      $rows[] = array(
        'Filter' => trim($mimeregex),
        'Type' => 'MIME Type Regex',
      );
    }
  }

  if (!empty($selecteddsid)) {
    foreach ($selecteddsid as $dsid) {
      $rows[] = array(
        'Filter' => trim($dsid),
        'Type' => 'DSID',
      );
    }
  }

  if (!empty($selecteddsidregexs)) {
    foreach ($selecteddsidregexs as $dsidregex) {
      $rows[] = array(
        'Filter' => trim($dsidregex),
        'Type' => 'DSID Regex',
      );
    }
  }

  $form_state['storage']['rows'] = $rows;

  $form['dsidmime']['table'] = array(
    '#type' => 'item',
    '#value' => (count($rows) > 0) ? '<strong>Applied Rules:</strong>' : '<strong>No rules applied!</strong>',
    'table' => islandora_xacml_editor_form_table($rows, $xacml_dsid),
  );

  $form['dsidmime']['newdsid'] = array(
    '#type' => 'textfield',
    '#title' => t('DSID'),
    '#autocomplete_path' => 'xacml/dsidautocomplete/' . $object_pid,
    '#size' => 35,
    '#description' => t('Type "*" to list all DSIDs.'),
    '#prefix' => '<div class="islandora_xacml_block_description">',
    '#ahah' => array(
      'event' => '',
      'path' => "xacml/ahah/add/dsid/" . $xacml_dsid . '/' . $object_pid,
      'wrapper' => "islandora_xacml",
      'method' => 'replace',
      'keypress' => TRUE,
    ),
  );
  $form['dsidmime']['newdsidadd'] = array(
    '#type' => 'button',
    '#value' => t('Add'),
    '#suffix' => '</div>',
    '#ahah' => array(
      'event' => 'click',
      'path' => "xacml/ahah/add/dsid/" . $xacml_dsid . '/' . $object_pid,
      'wrapper' => "islandora_xacml",
      'method' => 'replace',
    ),
  );

  if (variable_get('islandora_xacml_editor_show_dsidregex', 1)) {
    $form['dsidmime']['dsidregex'] = array(
      '#type' => 'textfield',
      '#title' => t('DSID Regex'),
      '#size' => 35,
      '#prefix' => '<div class="islandora_xacml_block">',
      '#ahah' => array(
        'event' => '',
        'path' => "xacml/ahah/add/dsidregex/" . $xacml_dsid . '/' . $object_pid,
        'wrapper' => "islandora_xacml",
        'method' => 'replace',
        'keypress' => TRUE,
      ),
    );
    $form['dsidmime']['dsidregexadd'] = array(
      '#type' => 'button',
      '#value' => t('Add'),
      '#suffix' => '</div>',
      '#ahah' => array(
        'event' => 'click',
        'path' => "xacml/ahah/add/dsidregex/" . $xacml_dsid . '/' . $object_pid,
        'wrapper' => "islandora_xacml",
        'method' => 'replace',
      ),
    );
  }
  $form['dsidmime']['newmime'] = array(
    '#type' => 'textfield',
    '#title' => t('MIME type'),
    '#autocomplete_path' => 'xacml/mimeautocomplete/' . $xacml_dsid . '/' . $object_pid,
    '#size' => 35,
    '#description' => t('Type "*" to list all MIME types.'),
    '#prefix' => '<div class="islandora_xacml_block_description">',
    '#ahah' => array(
        'event' => '',
        'path' => "xacml/ahah/add/mime/" . $xacml_dsid . '/' . $object_pid,
        'wrapper' => "islandora_xacml",
        'method' => 'replace',
        'keypress' => TRUE,
      ),
  );
  $form['dsidmime']['newmimeadd'] = array(
    '#name' => 'newmimeadd',
    '#type' => 'button',
    '#value' => t('Add'),
    '#suffix' => '</div>',
    '#ahah' => array(
      'event' => 'click',
      'path' => "xacml/ahah/add/mime/" . $xacml_dsid . '/' . $object_pid,
      'wrapper' => "islandora_xacml",
      'method' => 'replace',
    ),
  );

  if (variable_get('islandora_xacml_editor_show_mimeregex', 1)) {
    $form['dsidmime']['mimeregex'] = array(
      '#type' => 'textfield',
      '#title' => t('MIME type Regex'),
      '#size' => 35,
      '#prefix' => '<div class="islandora_xacml_block">',
      '#ahah' => array(
        'event' => '',
        'path' => "xacml/ahah/add/mimeregex/" . $xacml_dsid . '/' . $object_pid,
        'wrapper' => "islandora_xacml",
        'method' => 'replace',
        'keypress' => TRUE,
      ),
    );
    $form['dsidmime']['mimeregexadd'] = array(
      '#name' => 'mimeregexadd',
      '#type' => 'button',
      '#value' => t('Add'),
      '#suffix' => '</div>',
      '#ahah' => array(
        'event' => 'click',
        'path' => "xacml/ahah/add/mimeregex/" . $xacml_dsid . '/' . $object_pid,
        'wrapper' => "islandora_xacml",
        'method' => 'replace',
      ),
    );
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Set Permissions'),
  );

  return $form;
}

/**
 *
 * @param unknown_type $xacml
 * @param unknown_type $new_xacml
 * @param unknown_type $rule
 */
function islandora_xacml_editor_retrieve_users($xacml, $new_xacml, $rule) {
  if ($new_xacml == FALSE) {
    if ($rule == 'viewing' && $xacml->viewingRule->isPopulated()) {
      return $xacml->viewingRule->getUsers();
    }
    elseif ($rule == 'datastream' && $xacml->datastreamRule->isPopulated()) {
      return $xacml->datastreamRule->getUsers();
    }
    elseif ($rule == 'management' && $xacml->managementRule->isPopulated()) {
      return $xacml->managementRule->getUsers();
    }
    else {
      return variable_get('islandora_xacml_editor_default_users', '');
    }
  }
  else {
    return variable_get('islandora_xacml_editor_default_users', '');
  }
}

/**
 *
 * @param unknown_type $xacml
 * @param unknown_type $new_xacml
 * @param unknown_type $rule
 */
function islandora_xacml_editor_retrieve_roles($xacml, $new_xacml, $rule) {
  if ($new_xacml == FALSE) {
    if ($rule == 'viewing' && $xacml->viewingRule->isPopulated()) {
      return $xacml->viewingRule->getRoles();
    }
    elseif ($rule == 'datastream' && $xacml->datastreamRule->isPopulated()) {
      return $xacml->datastreamRule->getRoles();
    }
    elseif ($rule == 'management' && $xacml->managementRule->isPopulated()) {
      return $xacml->managementRule->getRoles();
    }
    else {
      return variable_get('islandora_xacml_editor_default_roles', '');
    }
  }
  else {
    return variable_get('islandora_xacml_editor_default_roles', '');
  }
}
/**
 *
 */
function islandora_xacml_editor_theme() {
  return array(
    'islandora_xacml_editor_theme' => array(
      'arguments' => array('element' => NULL),
    ),
  );
}

/**
 *
 * @param array $element
 */
function theme_islandora_xacml_editor_theme(array $element) {
  $rows = array();
  foreach (element_children($element['rows']) as $child) {
    $setting = $element['rows'][$child];
    $fields = array();
    foreach (element_children($setting) as $property) {
      $field = $setting[$property];
      $fields[] = drupal_render($field);
    }
    $rows[] = array(
      'data' => $fields,
      'class' => isset($setting['#attributes']['class']) ? $setting['#attributes']['class'] : NULL,
    );
  }
  $attributes = isset($element['#id']) ? array('id' => $element['#id']) : NULL;
  return theme_table($element['#header'], $rows, $attributes);
}

/**
 *
 * @param array $selected
 * @param unknown_type $xacml_dsid
 */
function islandora_xacml_editor_form_table(array $selected, $xacml_dsid) {
  $table = array(
    '#header' => array(t('Filter'), t('Type'), t('Remove'),
    ),
    '#theme' => 'islandora_xacml_editor_theme',
    '#tree' => TRUE,
    'rows' => array(),
  );
  $rows = &$table['rows'];
  $count = 0;
  foreach ($selected as $select) {
    $filter = $select['Filter'];
    $type = $select['Type'];
    $buttonname = str_replace(' ', '~SPACE~', $type) . '---' . $count;
    $rows[] = array(
      'Filter' => array(
        '#value' => $filter,
      ),
      'Type' => array(
        '#value' => $type,
      ),
      'remove' => array(
        '#name' => $buttonname,
        '#type' => 'button',
        '#value' => t('Remove'),
        '#ahah' => array(
          'event' => 'click',
          'path' => 'xacml/ahah/' . $xacml_dsid . '/remove',
          'wrapper' => "islandora_xacml",
          'method' => 'replace',
        ),
      ),
    );
    $count++;
  }
  return $table;
}

/**
 *
 * @param unknown_type $form
 * @param unknown_type $form_state
 */
function islandora_xacml_editor_page_validate(&$form, &$form_state) {
  drupal_add_css(drupal_get_path('module', 'islandora_xacml_editor') . '/css/islandora_xacml_editor.css');
  // Test if the user is locking themselves or the admin out of the object.
  $admin_user = $form_state['storage']['admin_user'];
  $current_user = $form_state['storage']['current_user'];

  // Management functions.
  if (!array_key_exists($admin_user, $form_state['values']['manage']['users']) ||
      !array_key_exists($current_user, $form_state['values']['manage']['users'])) {
    if ($admin_user == $current_user) {
      form_set_error('manage][users', "Please make sure that $admin_user is selected in the manage
        section to prevent locking yourself out of the object.", FALSE);
    }
    else {
      form_set_error('manage][users', "Please make sure that $admin_user and $current_user are selected in the manage
        section to prevent locking yourself and the admin user out of the object.", FALSE);
    }
  }

  if ($form_state['values']['dsidmime']['enabled']) {
    if (!array_key_exists($current_user, $form_state['values']['dsidmime']['users'])) {
      form_set_error('dsidmime][users', "Please make sure that $current_user is selected in the datastream and MIME type section.", FALSE);
    }

    if (count($form_state['storage']['rows']) == 0) {
      form_set_error('dsidmime][enabled', "There are no filters applied in the datastream and MIME type section.", FALSE);
    }
  }
}

/**
 * The submit function where all the XACML magic happens. Abracadabra.
 */
function islandora_xacml_editor_page_submit(&$form, &$form_state) {
  module_load_include('inc', 'islandora_xacml_api', 'IslandoraXacml');
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');

  $pid = $form_state['storage']['object_pid'];
  $dsid = $form_state['storage']['xacml_dsid'];
  $xacml = new IslandoraXacml($pid, $dsid);

  // Check datastreams and mime.
  $values = $form_state['values']['dsidmime'];

  if ($values['enabled']) {
    $xacml->datastreamRule->clear();

    if ($form_state['storage']['selectedmime']) {
      $xacml->datastreamRule->addMimetype($form_state['storage']['selectedmime']);
    }

    if ($form_state['storage']['selecteddsid']) {
      $xacml->datastreamRule->addDsid($form_state['storage']['selecteddsid']);
    }

    if ($form_state['storage']['selectedmimeregexs']) {
      $xacml->datastreamRule->addMimetypeRegex($form_state['storage']['selectedmimeregexs']);
    }

    if ($form_state['storage']['selecteddsidregexs']) {
      $xacml->datastreamRule->addDsidRegex($form_state['storage']['selecteddsidregexs']);
    }

    $xacml->datastreamRule->addUser($values['users']);
    $xacml->datastreamRule->addRole($values['roles']);
  }
  // User selects to disable the datastream rule when it was previously enabled.
  elseif ($values['enabled'] != $form_state['storage']['dsidmimeenabled']) {
    $xacml->datastreamRule->clear();
  }
  // Check admin (always have this rule).
  $values = $form_state['values']['manage'];
  $xacml->managementRule->clear();
  $xacml->managementRule->addUser($values['users']);
  $xacml->managementRule->addRole($values['roles']);

  // Check access.
  $values = $form_state['values']['access'];
  if ($values['enabled']) {
    $xacml->viewingRule->clear();
    $xacml->viewingRule->addUser($values['users']);
    $xacml->viewingRule->addRole($values['roles']);
  }
  // User selects to disable the access rule when it was previously enabled.
  elseif ($values['enabled'] != $form_state['storage']['accessenabled']) {
    $xacml->viewingRule->clear();
  }  

  $xacml->writeBackToFedora();

  if ($dsid == 'CHILD_SECURITY' && $form_state['values']['update_options'] != 'newchildren') {
    $option = $form_state['values']['update_options'];
    $xml = $xacml->getXmlString();
    $batch = array(
      'title' => t('Updating Policies'),
      'progress_message' => t('Please wait if many objects are being updated this could take a few minutes.'),
      'operations' => array(
        array(
          'islandora_xacml_editor_batch_function',
          array($xml, $pid, $option),
        ),
      ),
      'finished' => 'islandora_xacml_editor_batch_finished',
    );
    batch_set($batch);
  }
  else {
    unset($form_state['storage']);
    $form_state['redirect'] = array("fedora/repository/$pid");
  }
}

/**
 *
 * @param unknown_type $xml
 * @param unknown_type $pid
 * @param unknown_type $option
 * @param unknown_type $context
 */
function islandora_xacml_editor_batch_function($xml, $pid, $option, &$context) {
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  module_load_include('inc', 'islandora_xacml_api', 'Xacml');
  module_load_include('inc', 'islandora_xacml_api', 'XacmlException');

  if (empty($context['sandbox'])) {
    $query = new IslandoraXacmlEditorQuery($pid, $option);
    $context['sandbox'] = array();
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['pids'] = $query->getPids();
    $context['sandbox']['items'] = count($context['sandbox']['pids']);
    $context['results']['redirect'] = $pid;
    $context['results']['success'] = array();
    $context['results']['fail'] = array();
  }

  $targetpid = array_pop($context['sandbox']['pids']);
  $context['sandbox']['progress']++;

  $policy_update = new IslandoraUpdatePolicy($targetpid, $xml);
  $success = $policy_update->updatePolicy();

  if ($success) {
    $context['results']['success'][] = $targetpid;
  }
  else {
    $context['results']['fail'][] = $targetpid;
  }

  // Make sure we don't divide by zero.
  $context['finished'] = $context['sandbox']['items'] == 0 ? 1 : $context['sandbox']['progress'] / $context['sandbox']['items'];
}

/**
 *
 * @param unknown_type $success
 * @param unknown_type $results
 * @param unknown_type $operations
 */
function islandora_xacml_editor_batch_finished($success, $results, $operations) {
  if ($success) {
    $message = format_plural(count($results['success']), 'One policy updated.', '@count policies updated.');
  }
  else {
    $message = t('Finished with an error.');
  }
  drupal_set_message($message);

  if ($results['fail']) {
    foreach ($results['fail'] as $fail) {
      drupal_set_message(t("Failed to update: @failed_object. You do not have permission to update this object.", array('@failed_object' => $fail)), 'error');
    }
  }

  $pid = $results['redirect'];
  drupal_goto("fedora/repository/$pid");
}

/**
 *
 *
 *
 */
class IslandoraUpdatePolicy {
  protected $pid;
  /**
   *
   * @param unknown_type $pid
   * @param unknown_type $xml
   */
  function __construct($pid, $xml) {
    // Used at a couple different points...  Let's just load this here?
    module_load_include('inc', 'islandora_xacml_api', 'IslandoraXacml');
    $this->pid = $pid;
    $this->xml = $xml;
    $this->object = new Fedora_Item($pid);
  }

  /**
   *
   * @return boolean
   */
  function isCollection() {
    $query = 'select $parent_model from <#ri> where (
      <info:fedora/' . $this->pid . '> <fedora-model:hasModel> $model
      and $model <fedora-model:hasModel> $parent_model
      and $object <fedora-model:state> <info:fedora/fedora-system:def/model#Active>
      )
      minus $parent_model <mulgara:is> <info:fedora/fedora-system:FedoraObject-3.0>
      minus $parent_model <mulgara:is> <info:fedora/fedora-system:ContentModel-3.0>';
    $query_results = IslandoraXacmlEditorQuery::query($query);
    $results = new SimpleXMLElement($query_results);
    $collection = FALSE;
    foreach ($results->results->result as $result) {
      $pid = (string) $result->parent_model['uri'];
      $pid = explode('/', $pid);
      $pid = $pid[1];
      if ($pid == 'islandora:collectionCModel') {
        $collection = TRUE;
      }
    }
    return $collection;
  }
  /**
   *
   * @return boolean
   */
  function updatePolicy() {
    global $user;
    $success = FALSE;
    if ($this->object->exists()) {
      try {
        $xacml = new IslandoraXacml($this->pid, 'POLICY');
        if ($xacml->managementRule->hasPermission($user->name, $user->roles)) {
          $success = $this->addOrUpdateAllPolicies();
        }
      }
      catch (XacmlException $e) {
      }
    }
    return $success;
  }

  /**
   *
   */
  private function addOrUpdateAllPolicies() {
    module_load_include('inc', 'islandora_xacml_api', 'IslandoraXacml');
    $object_policy = new IslandoraXacml($this->pid, 'POLICY', $this->xml);
    $object_policy->writeBackToFedora();

    if ($this->isCollection()) {
      $child_policy = new IslandoraXacml($this->pid, 'CHILD_SECURIRY', $this->xml);
      $child_policy->writeBackToFedora();
    }

    return TRUE;
  }
}

/**
 *
 *
 *
 */
class IslandoraXacmlEditorQuery {
  protected $pid;
  protected $option;

  /**
   *
   * @param unknown_type $pid
   * @param unknown_type $option
   */
  function __construct($pid, $option) {
    $this->pid = $pid;
    $this->option = $option;
  }

  /**
   *
   * @param unknown_type $query_string
   */
  static function query($query_string) {
    module_load_include('inc', 'fedora_repository', 'api/fedora_utils');
    $query_string = htmlentities(urlencode($query_string));
    $content = '';
    $url = variable_get('fedora_repository_url', 'http://localhost:8080/fedora/risearch');
    $url .= "?type=tuples&flush=TRUE&format=Sparql&lang=itql&stream=on&query=" . $query_string;
    $content .= do_curl($url);
    return $content;
  }

  /**
   *
   */
  function getCount() {
    $query_results = IslandoraXacmlEditorQuery::query($this->getCountQuery());
    $results = new SimpleXMLElement($query_results);
    return (int) $results->results->result[0]->k0;
  }

  /**
   *
   */
  function getPids() {
    $pids = array();
    $query_results = IslandoraXacmlEditorQuery::query($this->getQuery());
    $results = new SimpleXMLElement($query_results);
    foreach ($results->results->result as $result) {
      $pid = (string) $result->object['uri'];
      $parts = explode('/', $pid);
      $pids[] = $parts[1];
    }
    return $pids;
  }

  /**
   *
   */
  private function getCountQuery() {
    $query = $this->getQuery();
    $query = 'select count( ' . $query;
    $query = $query . ' ) from <#ri> where $s $p $o';
    return $query;
  }

  /**
   *
   */
  private function getQuery() {
    if ($this->option == 'allgrandchildren') {
      $query = 'select $object from <#ri> where (walk(
        $object <fedora-rels-ext:isMemberOfCollection> <info:fedora/' . $this->pid . '> and
        $object <fedora-rels-ext:isMemberOfCollection> $parent) or walk(
        $object <fedora-rels-ext:isMemberOf> <info:fedora/' . $this->pid . '> and
        $object <fedora-rels-ext:isMemberOf> $parent))
        and $object <fedora-model:state> <info:fedora/fedora-system:def/model#Active>';
    }
    elseif ($this->option == 'allchildren') {
      $query = 'select $object from <#ri> where
        ($object <fedora-rels-ext:isMemberOfCollection> <info:fedora/' . $this->pid . '> or
        $object <fedora-rels-ext:isMemberOf> <info:fedora/' . $this->pid . '>)
        and $object <fedora-model:state> <info:fedora/fedora-system:def/model#Active>';
    }
    return $query;
  }
}
