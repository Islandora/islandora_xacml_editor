<?php

/**
 * @file
 * Islandora Xacml module API functions.
 */

define('ISLANDORA_XACML_API_MANAGEMENT_RULE', 'deny-management-functions');
define('ISLANDORA_XACML_API_DATASTREAM_RULE', 'deny-dsid-mime');
define('ISLANDORA_XACML_API_VIEWING_RULE', 'deny-access-functions');
define('ISLANDORA_XACML_API_PERMIT_RULE', 'allow-everything-else');

// @codingStandardsIgnoreStart
// XXX: Remove this at some point in the future.
define('MANAGEMENT_RULE', ISLANDORA_XACML_API_MANAGEMENT_RULE);
define('DATASTREAM_RULE', ISLANDORA_XACML_API_DATASTREAM_RULE);
define('VIEWING_RULE', ISLANDORA_XACML_API_VIEWING_RULE);
define('PERMIT_RULE', ISLANDORA_XACML_API_PERMIT_RULE);
// @codingStandardsIgnoreEnd

/**
 * Implements hook_menu().
 */
function islandora_xacml_api_menu() {
  $items = array();
  $items['admin/islandora/xacml'] = array(
    'title' => 'Islandora XACML',
    'description' => 'Settings for the Islandora XACML modules.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_xacml_api_settings'),
    'access arguments' => array('administer islandora_xacml_api'),
  );

  $items['admin/islandora/xacml/api'] = array(
    'title' => 'Islandora XACML API',
    'description' => 'Settings for the Islandora XACML API module.',
    'access arguments' => array('administer islandora_xacml_api'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  return $items;
}

/**
 * Implements hook_perm().
 */
function islandora_xacml_api_permission() {
  return array(
    'administer islandora_xacml_api' => array(
      'title' => 'Manage XACML API settings.',
    ),
  );
}

/**
 * Admin settings form.
 */
function islandora_xacml_api_settings() {
  $form['islandora_xacml_api_save_relationships'] = array(
    '#type' => 'checkbox',
    '#title' => t('Save relationships'),
    '#description' => t('Causes relationships to be written to the REL-INT/EXT when the policy is saved.'),
    '#default_value' => variable_get('islandora_xacml_api_save_relationships', TRUE),
  );
  $form['islandora_xacml_api_rels_viewable_role'] = array(
    '#type' => 'textfield',
    '#title' => t('Solr RELS-EXT ViewableByRole field'),
    '#default_value' => variable_get('islandora_xacml_api_rels_viewable_role', 'rels.isViewableByRole'),
  );
  $form['islandora_xacml_api_rels_viewable_user'] = array(
    '#type' => 'textfield',
    '#title' => t('Solr RELS-EXT ViewableByUser field'),
    '#default_value' => variable_get('islandora_xacml_api_rels_viewable_user', 'rels.isViewableByUser'),
  );

  return system_settings_form($form);
}

/**
 * Hook to update Solr queries to respect XACML rules.
 *
 * @param IslandoraSolrQueryProcessor $islandora_solr_query
 *   The Solr query processor to apply XACML rules to.
 */
function islandora_xacml_api_islandora_solr_query($islandora_solr_query) {
  global $user;

  if ($user->uid != 0) {
    $user_name = $user->name;
  }
  else {
    $user_name = 'anonymous';
  }

  $fq = variable_get('islandora_xacml_api_rels_viewable_user', 'rels.isViewableByUser') . ":\"" . $user_name . "\" OR ";

  // Check if any of my roles are allowed.
  foreach ($user->roles as $role) {
    $fq .= variable_get('islandora_xacml_api_rels_viewable_role', 'rels.isViewableByRole') . ":\"" . $role . "\" OR ";
  }
  // Check if the object is open (unrestricted).
  $fq .= "((*:* -" . variable_get('islandora_xacml_api_rels_viewable_user', 'rels.isViewableByUser') . ":[* TO *]) AND (*:* -" . variable_get('islandora_xacml_api_rels_viewable_role', 'rels.isViewableByRole') . ":[* TO *]))";
  $islandora_solr_query->solrParams['fq'][] = $fq;
}

/**
 * Implements hook_islandora_basic_collection_query_get_query_statements().
 */
function islandora_xacml_api_islandora_basic_collection_get_query_statements($type) {
  switch ($type) {
    case 'manage':
      $to_return = array(
        'OPTIONAL {?object <http://islandora.ca/ontology/relsext#isManageableByRole> ?role . }',
        'OPTIONAL {?object <http://islandora.ca/ontology/relsext#isManageableByUser> ?user . }',
      );
      return $to_return;

    case 'view':
    default:
      $to_return = array(
        'OPTIONAL {?object <http://islandora.ca/ontology/relsext#isViewableByRole> ?role . }',
        'OPTIONAL {?object <http://islandora.ca/ontology/relsext#isViewableByUser> ?user . }',
      );
      return $to_return;

  }
}

/**
 * Implements hook_islandora_basic_collection_query_get_query_filters().
 */
function islandora_xacml_api_islandora_basic_collection_get_query_filters() {
  global $user;
  if ($user->uid === 0) {
    $user_name = 'anonymous';
  }
  else {
    $user_name = $user->name;
  }

  $role_matches = array();
  foreach ($user->roles as $role) {
    $role_matches[] = "?role='{$role}'";
  }
  $role_matcher = implode(' || ', $role_matches);

  return "(!bound(?role) && !bound(?user)) || (bound(?user) && ?user='{$user_name}') || (bound(?role) && ($role_matcher))";
}

/**
 * Implements hook_islandora_object_access().
 */
function islandora_xacml_api_islandora_object_access($op, $object, $user) {
  $management_operations = array(
    ISLANDORA_MANAGE_PROPERTIES,
    ISLANDORA_METADATA_EDIT,
    ISLANDORA_ADD_DS,
    ISLANDORA_PURGE,
    ISLANDORA_INGEST,
    ISLANDORA_REVERT_DATASTREAM,
  );

  // XXX: Is it necessary to address the case when POLICY is not readable?...
  // ... really, we should never get to this point if the POLICY isn't
  // readable...
  if (isset($object['POLICY'])) {
    if ($user->uid === 0) {
      $user->name = 'anonymous';
    }

    $xacml = new IslandoraXacml($object);

    if (ISLANDORA_VIEW_OBJECTS == $op) {
      return $xacml->viewingRule->hasPermission($user->name, $user->roles);
    }
    elseif (in_array($op, $management_operations) && $xacml->managementRule->isPopulated()) {
      return $xacml->managementRule->hasPermission($user->name, $user->roles);
    }
  }

  return NULL;
}

/**
 * Implements hook_islandora_datastream_access().
 */
function islandora_xacml_api_islandora_datastream_access($op, $datastream, $user) {
  if (isset($datastream->parent['POLICY'])) {
    if ($user->uid === 0) {
      $user->name = 'anonymous';
    }

    $xacml = new IslandoraXacml($datastream->parent);

    $check_ops = array(
      ISLANDORA_VIEW_OBJECTS,
      ISLANDORA_METADATA_EDIT,
      ISLANDORA_PURGE,
      ISLANDORA_REVERT_DATASTREAM,
    );
    if (in_array($op, $check_ops)) {
      $object_results = islandora_xacml_api_islandora_object_access(
        $op,
        $datastream->parent,
        $user
      );
      $datastream_results = $xacml->datastreamRule->hasPermission(
        $user->name,
        $user->roles,
        $datastream->mimetype,
        $datastream->id
      );

      $results = (array) $object_results;
      $results[] = $datastream_results;
      return $results;
    }
  }
  return NULL;
}
