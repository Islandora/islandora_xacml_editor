<?php

/**
 * @file
 * Islandora Xacml module API functions.
 */

define('MANAGEMENT_RULE', 'deny-management-functions');
define('DATASTREAM_RULE', 'deny-dsid-mime');
define('VIEWING_RULE', 'deny-access-functions');
define('PERMIT_RULE', 'allow-everything-else');

/**
 * Implements hook_menu().
 */
function islandora_xacml_api_menu() {
  $items = array();
  $items['admin/islandora/xacml'] = array(
    'title' => 'Islandora XACML',
    'description' => 'Settings for the Islandora XACML modules.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_xacml_api_settings'),
    'access arguments' => array('administer islandora_xacml_api'),
  );

  $items['admin/islandora/xacml/api'] = array(
    'title' => 'Islandora XACML API',
    'description' => 'Settings for the Islandora XACML API module.',
    'access arguments' => array('administer islandora_xacml_api'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  return $items;
}

/**
 * Implements hook_perm().
 */
function islandora_xacml_api_permission() {
  return array(
    'administer islandora_xacml_api' => array(
      'title' => 'Manage XACML API settings.',
    ),
  );
}

/**
 * Admin settings form.
 */
function islandora_xacml_api_settings() {
  $form['islandora_xacml_api_save_relationships'] = array(
    '#type' => 'checkbox',
    '#title' => t('Save relationships'),
    '#description' => t('Causes relationships to be written to the REL-INT/EXT when the policy is saved.'),
    '#default_value' => variable_get('islandora_xacml_api_save_relationships', TRUE),
  );
  $form['islandora_xacml_api_rels_viewable_role'] = array(
    '#type' => 'textfield',
    '#title' => t('Solr RELS-EXT ViewableByRole field'),
    '#default_value' => variable_get('islandora_xacml_api_rels_viewable_role', 'rels.isViewableByRole'),
  );
  $form['islandora_xacml_api_rels_viewable_user'] = array(
    '#type' => 'textfield',
    '#title' => t('Solr RELS-EXT ViewableByUser field'),
    '#default_value' => variable_get('islandora_xacml_api_rels_viewable_user', 'rels.isViewableByUser'),
  );

  return system_settings_form($form);
}

/**
 * Hook to update Solr queries to respect XACML rules.
 *
 * @param IslandoraSolrQueryProcessor $islandora_solr_query
 *   The Solr query processor to apply XACML rules to.
 */
function islandora_xacml_api_islandora_solr_query($islandora_solr_query) {
  global $user;

  if ($user->uid != 0) {
    $user_name = $user->name;
  }
  else {
    $user_name = 'anonymous';
  }

  $fq = variable_get('islandora_xacml_api_rels_viewable_user', 'rels.isViewableByUser') . ":\"" . $user_name . "\" OR ";

  // Check if any of my roles are allowed.
  foreach ($user->roles as $role) {
    $fq .= variable_get('islandora_xacml_api_rels_viewable_role', 'rels.isViewableByRole') . ":\"" . $role . "\" OR ";
  }
  // Check if the object is open (unrestricted).
  $fq .= "((*:* -" . variable_get('islandora_xacml_api_rels_viewable_user', 'rels.isViewableByUser') . ":[* TO *]) AND (*:* -" . variable_get('islandora_xacml_api_rels_viewable_role', 'rels.isViewableByRole') . ":[* TO *]))";
  $islandora_solr_query->solrParams['fq'][] = $fq;
}

/**
 * Hook to update the collection query when XACML is enabled.
 *
 * @note
 *   By default the collection query does not respect XACML rules,
 *   now when the XACML editor module is enabled the
 *   query will be modified to use XACML rules.
 *
 * @param array $query_array
 *   Query array containing pid, type, page_number and page_size
 *
 * @return array
 *   The query_array passed through after modified.
 */
function islandora_xacml_api_islandora_basic_collection_query_alter(&$query_array) {
  module_load_include('inc', 'islandora', 'includes/utilities');
  global $user;
  $pid = $query_array['pid'];
  $query = <<<EOQ
  PREFIX is: <http://islandora.ca/ontology/relsext#>
  SELECT ?object ?title ?content
     FROM <#ri>
     WHERE {
            ?object ?collection_predicate <info:fedora/$pid> ;
                   <fedora-model:label> ?title ;
                   <fedora-model:hasModel> ?content ;
                   <fedora-model:state> <fedora-model:Active> .
      OPTIONAL {
        ?object is:isViewableByUser ?usr .
        ?object is:isViewableByRole ?role .
      }
            FILTER(sameTerm(?collection_predicate, <fedora-rels-ext:isMemberOfCollection>) || sameTerm(?collection_predicate, <fedora-rels-ext:isMemberOf>))
            FILTER (!sameTerm(?content, <info:fedora/fedora-system:FedoraObject-3.0>))
EOQ;
  $enforced = variable_get('islandora_namespace_restriction_enforced', FALSE);
  if ($enforced) {
    $namespace_array = islandora_get_allowed_namespaces();
    $namespace_sparql = implode('|', $namespace_array);
    $query .= 'FILTER(regex(str(?object), "info:fedora/(' . $namespace_sparql . '):"))';
  }
  // Construct the FILTER string for users and roles.
  $filter_string = '';
  $role_count = 0;
  foreach ($user->roles as $role) {
    if ($role_count === 0) {
      $filter_string .= "FILTER(!bound(?role) || (bound(?role) && (sameTerm(?role, '$role')";
    }
    else {
      $filter_string .= " || sameTerm(?role, '$role')";
    }
    $role_count++;
  }
  $filter_string .= "))";
  if ($user->uid != 0) {
    $user_name = $user->name;
  }
  else {
    $user_name = 'anonymous';
  }
  $filter_string .= " || (!bound(?usr) || (bound(?usr) && sameTerm(?usr, '$user_name'))))\n}";
  $query .= $filter_string;
  $query_array['query'] = $query;
  $query_array['type'] = 'sparql';
}

/**
 * Implements hook_islandora_object_access().
 */
function islandora_xacml_api_islandora_object_access($op, $object, $user) {
  $management_operations = array(
    FEDORA_MANAGE_PROPERTIES,
    FEDORA_METADATA_EDIT,
    FEDORA_ADD_DS,
    FEDORA_PURGE,
    FEDORA_INGEST,
  );

  // XXX: Is it necessary to address the case when POLICY is not readable?...
  // ... really, we should never get to this point if the POLICY isn't
  // readable...
  if (isset($object['POLICY'])) {
    $xacml = new IslandoraXacml($object);

    if (FEDORA_VIEW_OBJECTS == $op) {
      return $xacml->viewingRule->hasPermission($user->name, $user->roles);
    }
    elseif (in_array($op, $management_operations)) {
      return $xacml->managementRule->hasPermission($user->name, $user->roles);
    }
  }

  return NULL;
}

/**
 * Implements hook_islandora_datastream_access().
 */
function islandora_xacml_api_islandora_datastream_access($op, $datastream, $user) {
  if (isset($datastream->parent['POLICY'])) {
    $xacml = new IslandoraXacml($datastream->parent);

    if (FEDORA_VIEW_OBJECTS == $op) {
      return $xacml->datastreamRule->hasPermission($user->name, $user->roles, $datastream->mimetype, $datastream->id);
    }
  }
  return NULL;
}
