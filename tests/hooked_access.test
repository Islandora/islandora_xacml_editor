<?php

/**
 * @file
 * Tests to see if the hooks get called when appropriate.
 *
 * In the test module 'islandora_hooked_access_test' there are implementations
 * of hooks being tested. These implementations modifies the session, and
 * that's how we test if the hook gets called.
 *
 * To make sense of these tests reference islandora_hooked_access_test.module.
 */

class IslandoraXacmlEditorHookedAccessTestCase extends IslandoraWebTestCase {

  /**
   * Gets info to display to describe this test.
   *
   * @see IslandoraWebTestCase::getInfo()
   */
  public static function getInfo() {
    return array(
      'name' => 'Islandora XACML Editor Hooked Access Hook Implementation',
      'description' => 'Ensure that the hooked access callback returns appropriate results.',
      'group' => 'Islandora XACML Editor',
    );
  }

  /**
   * Creates an admin user and a connection to a fedora repository.
   *
   * @see IslandoraWebTestCase::setUp()
   */
  public function setUp() {
    parent::setUp('islandora_xacml_editor');
    $this->repository = $this->admin->repository;
    $this->objects = array(
      'test:testAccessHook',
    );
    $this->op = 'administer islandora_xacml_editor';
    $this->purgeTestObjects();
    $this->dsid = 'asdf';
    $this->createTestObjects();
    $this->object = $this->repository->getObject('test:testAccessHook');
  }

  /**
   * Free any objects/resources created for this test.
   *
   * @see IslandoraWebTestCase::tearDown()
   */
  public function tearDown() {
    $this->purgeTestObjects();
    unset($this->repository);
    parent::tearDown();
  }

  /**
   * Create test object(s).
   */
  public function createTestObjects() {
    foreach ($this->objects as $object_id) {
      $object = $this->repository->constructObject($object_id);
      $object->label = $object_id;

      $datastream = $object->constructDatastream($this->dsid, 'M');
      $datastream->label = 'fdsa';
      $datastream->mimetype = 'text/plain';
      $datastream->content = 'Some kinda awesome content stuffs...';

      $object->ingestDatastream($datastream);
      $object = $this->repository->ingestObject($object);
    }
  }

  /**
   * Purge any objects created by the test's in this class.
   */
  public function purgeTestObjects() {
    foreach ($this->objects as $object) {
      try {
        $object = $this->repository->getObject($object);
        $this->repository->purgeObject($object->id);
      }
      catch (Exception $e) {
        // Meh... Either it didn't exist or the purge failed.
      }
    }
  }

  /**
   * Test all operations on object.
   */
  public function testAllAccess() {
    $op = $this->op;

    $this->assertFalse(islandora_object_access($op, $this->object, $this->drupalCreateUser(array(
      $op,
    ))), "Deny '$op' without existing POLICY or ISLANDORA_ADD_DS.");
    $this->assertTrue(islandora_object_access($op, $this->object, $this->drupalCreateUser(array(
      $op,
      ISLANDORA_ADD_DS,
    ))), "Allow '$op' with ISLANDORA_ADD_DS and without existing POLICY.");

    $user_allow = $this->drupalCreateUser(array(
      $op,
      ISLANDORA_METADATA_EDIT,
    ));
    $users_deny = array(
      'edit permission' => $this->drupalCreateUser(array($op)),
      'admin permission' => $this->drupalCreateUser(array(ISLANDORA_METADATA_EDIT)),
      'all required permissions' => $this->drupalCreateUser(),
    );

    $policy = new IslandoraXacml($this->object);
    $policy->managementRule->addUser($user_allow->name);
    $policy->writeBackToFedora();

    foreach ($users_deny as $info => $user) {
      $this->assertFalse(islandora_object_access($op, $this->object, $user), "Deny '$op' with existing POLICY but missing $info.");
    }
    $this->assertTrue(islandora_object_access($op, $this->object, $user_allow), "Allow '$op' with existing POLICY and necessary permissions.");
  }
}
